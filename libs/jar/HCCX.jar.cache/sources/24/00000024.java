package com.github.catvod.spider;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Base64;
import com.github.catvod.crawler.Spider;
import com.github.catvod.crawler.SpiderApi;
import com.github.catvod.spider.merge.h1.H.C0238;
import com.github.catvod.spider.merge.h1.b.n;
import com.github.catvod.spider.merge.h1.b.p;
import com.github.catvod.spider.merge.h1.b0.C0240;
import com.github.catvod.spider.merge.h1.b0.C0241;
import com.github.catvod.spider.merge.h1.c0.C0242;
import com.github.catvod.spider.merge.h1.d.C0243;
import com.github.catvod.spider.merge.h1.d.d;
import com.github.catvod.spider.merge.h1.d0.C0244;
import com.github.catvod.spider.merge.h1.d0.C0245;
import com.github.catvod.spider.merge.h1.e0.C0246;
import com.github.catvod.spider.merge.h1.h.C0560b;
import com.github.catvod.spider.merge.h1.i.C0247;
import com.github.catvod.spider.merge.h1.i.C0248;
import com.github.catvod.spider.merge.h1.i.b;
import com.github.catvod.spider.merge.h1.j.C0249;
import com.github.catvod.spider.merge.h1.j.j;
import com.github.catvod.spider.merge.h1.j.k;
import com.github.catvod.spider.merge.h1.j.m;
import com.github.catvod.spider.merge.h1.k.a;
import com.github.catvod.spider.merge.h1.k.g;
import com.github.catvod.spider.merge.h1.n0.C0250;
import com.github.catvod.spider.merge.h1.x.C0251;
import com.github.catvod.spider.merge.h1.x.C0252;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import okhttp3.Call;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* loaded from: classes.dex */
public class XBPQ extends Spider {
    public static String K = "";
    private static HashMap<String, String> L;

    /* renamed from: short  reason: not valid java name */
    private static final short[] f36short = {2410, 2410, 2404, 2411, 607, 549, 3221, 982, 973, 22656, -26368, 2779, 2777, 2764, 2781, 2801, 2780, 1332, 1332, 776, 397, 706, 698, 2396, 2855, 1920, 1934, 1938, 1817, 1814, 1818, 1810, 2005, 1986, 1999, 2006, 1990, -29949, -29483, 1837, 1854, 1895, 1893, 1908, 1874, 1876, 1913, 1904, 1893, 22266, -28135, -2022, 1922, 1920, 1937, 1975, 1969, 1948, 1941, 1920, 1997, 1996, -27908, -29686, 1992, 1992, 2011, 17521, -28097, 2623, 2616, 2598, -24858, -24827, 25816, -31712, -27762, 25813, 30416, 29528, 24241, 24257, 2398, 2393, 2375, 522, 525, 527, 519, 567, 528, 526, 22502, 31131, 1429, 1426, 1420, 22204, 30913, -28604, 26399, 2136, 2116, 2116, 2112, 21599, 31266, -25044, 2937, 2934, 2939, 2921, 2921, 2885, 2927, 2920, 2934, 1781, 1783, 1762, 1779, 1731, 1764, 1786, 27979, 29813, 2338, 2341, 2363, 28026, 29764, -25192, 27331, 873, 817, 803, 804, 822, 807, 820, 821, 803, 873, 2051, 2070, 2830, 2826, 2831, 2903, 2885, 2882, 2896, 2881, 2898, 2899, 2885, 2831, 2824, 2888, 2900, 2900, 2896, 2899, 2847, 2940, 2842, 2831, 2831, 2939, 2942, 2831, 2941, 2827, 2825, 2831, 2830, 2826, 2390, 2386, 2384, 2320, 2316, 2316, 2312, 2315, 2375, 2340, 2370, 2391, 2391, 2339, 2342, 2391, 2341, 2387, 2385, 2391, 2390, 2386, 21839, 31538, 2098, 23149, 29712, 22615, 23458, 30175, 23977, 28756, 20822, 32555, 22365, 31392, 26031, 24626, -30563, 302, 289, 300, 318, 318, 274, 291, 300, 288, 296, 2284, 2275, 2286, 2300, 2300, 2256, 2297, 2286, 2275, 2298, 2282, 29670, 20494, 25260, 24096, 23082, 28777, 23449, 22345, 18368, 28588, 21169, 417, 417, 1189, 1189, 3079, 3111, 3079, 3111, 26128, 32558, 22018, 32012, 26983, -26267, 28322, 992, 995, 995, 1005, 994, 1013, 3014, 3014, 3016, 3015, 1597, 1588, 1637, 1656, 1540, 1549, 1628, 1589, 1601, 1601, 1607, 1603, 1622, 1600, 1589, 1600, 756, 737, 801, 868, 894, 866, 474, 798, 791, 838, 815, 859, 861, 857, 844, 815, 858, 396, 466, 469, 459, 413, 2122, 2109, 2147, 2148, 2170, 2122, 2092, 928, 1015, 1009, 998, 958, 558, 598, 513, 519, 528, 558, 584, 2192, 2282, 2287, 2291, 2199, 2221, 2273, 2230, 2189, 2273, 2198, 2300, 2273, 2293, 2193, 2231, 2301, 2272, 2301, 2300, 2225, 2295, 1078, 1105, 1108, 1076, 1111, 1056, 1076, 1860, 263, 354, 352, 257, 1956, 30415, 30415, 30415, 2828, 2851, 2939, 752, 756, 1525, 1421, 1258, 1235, 1241, 1268, 1247, 1247, 1246, 1258, 1224, 1237, 1218, 1219, 21380, 30525, 25429, 20828, -28038, -29445, 19353, 29052, 21638, 28735, 19611, 30334, 3100, 3072, 3072, 3076, 861, 861, 992, 996, 998, 934, 954, 954, 958, 957, 1009, 914, 1012, 993, 993, 917, 912, 993, 915, 997, 999, 993, 992, 996, 2670, 1483, 21519, 22493, -29149, -29508, 25210, 31556, -28008, 26051, 26779, 29093, 3314, 3317, 3307, 3036, 1107, 1094, 1307, 1307, 19254, -25224, 1400, 1407, 1377, 915, 902, 902, 1220, 2517, 21357, 32016, 286, 281, 263, 20572, 32289, -26972, 25087, 23106, 29759, -28623, 1981, 1970, 1983, 1965, 1965, 1921, 1963, 1964, 1970, 2562, 2560, 2581, 2564, 2612, 2579, 2573, 21969, 22591, 21997, -27749, 24575, 23597, 23537, 22051, -28587, 3135, 3170, 3113, 3179, 3185, 3174, 3173, 3134, 3105, 3109, 3109, 3105, 3160, 24326, 22568, 3129, 3179, 3191, 3191, 3187, 3166, 2259, 2190, 2245, 2183, 2205, 2186, 2185, 2258, 2248, 2249, 2249, 2248, 2228, 23530, 23748, 2261, 2183, 2203, 2203, 2207, 2226, 1802, 1806, 20731, 1912, 1856, 1802, 1806, 1617, 1621, 20896, 1623, 1571, 1563, 1622, 1617, 1621, 2837, 2861, -28609, -26676, -31031, -31658, -24636, 26783, 291, 319, 319, 315, 312, 369, 356, 356, 316, 316, 316, 357, 298, 295, 290, 306, 318, 293, 303, 313, 290, 317, 302, 357, 296, 292, 294, 356, 312, 356, 352, 298, 295, 290, 306, 318, 293, 303, 313, 290, 317, 302, 357, 296, 292, 294, 356, 312, 356, 365, 365, 361, 26457, 2033, 1513, -29174, -30244, 3107, 3106, 3109, 3122, 3104, 2992, 22132, 22761, 21048, 23717, 26247, 26388, 24670, 21079, 21948, -30435, -27016, -28489, 22782, 21606, 755, 742, 767, 713, 740, 755, 736, 755, 740, 741, 755, 1032, 22510, 22899, 21453, 23888, 26482, 26337, 25022, 21431, 21596, -30467, -26728, -28329, 22814, 21894, 1713, 1700, 1725, 1675, 1702, 1713, 1698, 1713, 1702, 1703, 1713, 889, 2042, 1966, 855, 2461, 580, 576, 517, 578, 566, 526, 577, 579, 580, 576, 21727, 24329, 21972, 22442, 23170, 21786, -26867, -27685, -29395, -1597, 1775, 1775, 1788, -30364, 18497, 18589, 22015, 2726, -32696, 26621, -31156, -31533, 28434, 28289, -24767, 26650, 25903, 29630, -2893, 3016, 3034, 3037, 3050, 3021, 3027, 2962, 2962, 2945, 2975, 25120, -31043, 22236, 22330, -30471, -30106, 27546, 32011, -31415, 21800, 21710, -29939, -30318, 26734, 32511, 1747, 1747, 1728, 1758, 2399, 2318, 2310, 2327, 2306, 2371, 2315, 2327, 2327, 2323, 937, 985, 1022, 477, 477, 477, 477, 477, 477, 2485, 2530, 2533, 2555, 2485, 2493, 2485, 2481, 2481, 2485, 2491, 919, 919, 680, 3162, 486, 391, 450, -31232, -32298, 2606, 2621, -30736, -31377, 2646, 2673, 2671, -31776, 29186, 23545, -24806, -2791, -29757, -30372, 1637, 1602, 1628, -28717, 32305, -27863, -29217, -1743, 1565, 1565, 1550, -29885, -29547, 1901, 1918, 1834, 1845, 1837, 1840, 1795, 1845, 1844, 22202, -28071, -1958, 3000, 2983, 3007, 2978, 2961, 2983, 2982, 3066, 3067, -24885, -32707, -2861, 3071, 3071, 3052, 824, 820, 831, 830, 28166, 27533, 18667, -31435, -30806, 18155, 2467, 2485, 2486, 2464, 2471, -29480, 22658, 23371, 30177, 818, 818, 801, 831, 2038, 2016, 2019, 2037, 2034, 1961, 1970, 1970, 1974, 2081, 1094, 1591, 1569, 1570, 1588, 1587, 1640, 25561, 24466, -30879, -32522, 17920, 28544, -31876, 23185, 1352, 1364, 1364, 1360, 18735, 24751, -25319, -29612, 1976, 1976, 1963, 1973, 1318, 1319, 1334, 1384, 1399, 1395, 1395, 1399, 2959, 1052, 1035, 1048, 1098, 1025, 1039, 1043, 1111, 1096, 1100, 1100, 1096, 1846, 1900, 1915, 1910, 1903, 1919, 1831, 1848, 1852, 1852, 1848, 2899, 2846, 2903, 2901, 2884, 2840, 2834, 2838, 2838, 2924, 2838, 3162, 3095, 3097, 3077, 3137, 2927, 2879, 2856, 2853, 2876, 2860, 2932, 1115, 1101, 1116, 1029, 1099, 1095, 1095, 1091, 1089, 1101, 2474, 2460, 2445, 2516, 2490, 2454, 2454, 2450, 2448, 2460, 1652, -30802, 22872, -27983, -31748, 28732, 27761, 20488, -26580, -30367, 1695, 1683, 1666, -30379, 21625, -25508, -29423, 1789, 1789, 1774, 1776, -25595, -29368, 2264, 2271, 
    2265, 1833, 1829, 1838, 1839, 1823, 1848, 1830, 2406, 2410, 2427, 801, 781, 796, 2120, 2116, 2133, 1359, 792, 772, 772, 768, 771, 842, 863, 863, 799, 787, 770, 862, 775, 799, 791, 791, 862, 796, 793, 798, 795, 863, 2216, 2228, 2228, 2224, 2227, 2298, 2287, 2287, 2223, 2211, 2226, 2289, 2286, 2231, 2223, 2215, 2215, 2286, 2220, 2217, 2222, 2219, 2287, 1302, 2600, 2596, 2596, 2592, 2594, 2606, 1715, 1719, 1072, 1071, 1079, 1066, 1080, 1070, 1069, 1083, 1084, 1138, 1139, -28349, -28747, 1143, 1143, 1124, -29245, 19686, 24393, 24643, 20824, 1866, -31247, 17620, 22894, 26737, 22890, 2159, 1700, 2665, 2579, 413, 2895, 1945, 967, 963, 961, 897, 925, 925, 921, 967, 963, 960, 700, 681, 3047, 2975, 2691, 2719, 2719, 2715, 22197, 23788, 597, 597, 582, 600, 1956, 1970, 1955, 2042, 1972, 1976, 1976, 1980, 1982, 1970, 1139, 2075, 2093, 2108, 2149, 2091, 2087, 2087, 2083, 2081, 2093, 1816, 1838, 1855, 1894, 1800, 1828, 1828, 1824, 1826, 1838, 1673, 1695, 1678, 1751, 1721, 1685, 1685, 1681, 1683, 1695, 3316, 2828, 608, 627, 631, 610, 614, 707, 695, 695, 670, 707, 695, 668, 656, 735, 662, 706, 706, 2972, 2972, 32539, 19024, 21394, 26490, 19789, 27746, 27220, 20760, 2226, 2245, -31301, 17566, 22647, 22816, 2531, 2455, -31313, 17546, 22309, 22220, 26671, 22836, 3064, 2957, -29282, 19643, 20737, 24317, 24606, 20741, 2086, 2075, 2076, 2050, 2132, 2233, 2286, 2280, 2303, 2215, 2231, 2255, 2200, 2206, 2185, 2231, 2257, 641, 669, 669, 665, 2905, -29544, 25323, 1404, 1405, 1429, 1426, 27979, -28598, -30285, 18582, 21804, 23248, 25651, 21800, -29683, 19752, 24199, 24430, 24973, 20630, -30681, 18690, 21995, 21692, 3046, 2974, 3046, 2974, 855, 801, 2648, 2648, 31844, 1594, 1594, 31844, 29166, 1198, 2195, 3090, 25095, 26522, 3259, 3259, -30094, 19287, 22776, 26610, 22249, -30288, 18581, 21807, 25648, 21803, -30061, 19382, 25568, 22024, 1239, 1197, -30627, 18808, -30481, 25748, 31767, 3192, 3074, 2543, 2448, 1600, 1599, -31597, 17846, 17770, 22536, 720, 866, 792, 866, 792, 25434, 21158, 21312, 26203, 23886, 18383, 20533, 27435, 23255, 17610, 21296, 26670, 22994, 2371, 1239, 1057, 1076, 2105, 2109, 2111, 2123, 2124, 2105, 2109, 2110, 614, 609, 532, 528, 2338, 2342, 2340, 2384, 2391, 2338, 2342, 2341, 305, 310, 323, 327, 2557, 2543, 2444, 2484, 2555, 2695, 3172, 3190, 3093, 3117, 3170, 1549, 959, 959, 1706, 1753, 1756, 1724, 1759, 1704, 1725, 1707, 2820, 2930, 2820, 2930, 2051, 2160, 2167, 2168, 2167, 2136, 2166, 2049, 2068, 2050, 485, 406, 401, 414, 401, 446, 400, 487, 498, 484, 3157, 21222, 24478, 3159, 3093, 24395, 22629, 3188, 729, 1787, 1791, 1673, 1678, 21968, 21246, 1775, 1789, 1787, 1791, 1770, 1788, 1673, 1672, 1787, 1791, 19006, -29262, 3119, 17017, 24433, 22623, 3150, 2819, 2823, 2929, 2934, 17696, 22568, 24326, 2839, 2821, 2819, 2823, 2834, 2820, 2929, 2928, 2819, 2823, 623, 22047, 23739, 20931, 526, 2109, 2105, 2127, 2120, 23608, 22172, 23524, 2089, 2107, 2109, 2105, 2092, 2106, 2127, 2126, 2109, 2105, 3266, 17044, 22706, 21014, 24430, 3235, 1956, 1952, 2006, 2001, 18823, 21409, 22789, 21629, 1968, 1954, 1956, 1952, 1973, 1955, 2006, 2007, 1956, 1952, -30238, -29132, 1484, 1503, 1426, 1428, 1411, 1442, 1422, 1423, 1429, 1412, 1423, 1429, 1444, 1433, 1429, 21531, -28424, -1285, 1585, 1591, 1568, 1537, 1581, 1580, 1590, 1575, 1580, 1590, 1543, 1594, 1590, 1642, 1643, -27813, -29267, 1647, 1647, 1660, 1104, 1062, 3132, 3132, 3296, 3296, 1583, 1594, 1127, 2514, 2514, 2514, 1906, 1910, 1888, 22995, 21675, 1890, 1908, 1906, 1910, 1909, 2138, 22249, 23441, 2136, 2120, 2124, 24873, 25780, 1278, 1274, 1164, 1163, 18965, 1263, 25135, 26546, 1163, 1258, -1078, 1165, 1272, 1278, 1274, 1263, 1273, 1164, 1165, 1278, 1274, 2272, 2272, 1360, 23523, 22171, 1362, 1634, 1972, 29387, 3146, 3129, 3134, 3121, 3134, 3089, 3135, 3144, 3165, 3147, -29353, -30079, 377, 362, 26539, 25142, 20654, -27571, -424, -30045, 27028, 26289, -434, 1789, 1774, 27854, 26963, 2629, 2681, 2585, 2584, -24792, -32290, -2768, 2588, 2588, 2575, 1461, 1430, 1412, 1426, 1473, 1475, 1836, 1845, 386, 407, 855, 855, 1764, 1760, 1672, 1686, 1681, 1762, 1764, 1760, 1781, 1763, 1686, 1687, 1764, 1760, 1749, 1749, 25308, 26433, 1605, 2547, 2551, 2463, 2492, 2478, 2488, 2539, 2537, 2433, 2549, 2549, 2547, 2551, 2530, 2548, 2433, 2548, 2547, 2551, 1970, 1974, 1968, 1984, 2040, 3066, 3033, 3019, 3037, 2958, 2956, 2966, 3053, 3050, 3060, 3047, 3051, 3065, 3070, 3069, 24985, 21687, 604, 639, 621, 635, 552, 554, 560, 592, 593, 577, 585, 588, 607, 590, 26687, 23825, 1962, 1929, 1947, 1933, 2014, 2012, 1990, 1958, 1959, 1975, 1976, 1961, 1964, 1964, 1953, 1958, 1967, 28105, 22759, 800, 807, 825, 785, 816, 822, 826, 817, 816, 2194, 2187, 906, 927, 859, 863, 861, 823, 809, 814, 859, 863, 842, 809, 808, 860, 859, 863, 1073, 1070, 3296, 3296, 3001, 3005, 3027, 3019, 3020, 3007, 3001, 3005, 2984, 3006, 3019, 3018, 3001, 3005, 770, 770, 25121, 26556, 2624, 2848, 2852, 2939, 2940, 2914, 2890, 2923, 2925, 2913, 2922, 2923, 2898, 2854, 2854, 2848, 2852, 2865, 2855, 2898, 2855, 2848, 2852, 1328, 1299, 1281, 1303, 1348, 1350, 2984, 554, 1910, 1837, 1770, 2185, 2188, 2198, 2193, 2302, 2211, 2276, 2276, 2302, 2285, 2211, 2300, 28263, 30553, -30220, 23222, 25151, 22289, 2082, 2162, 2167, 2080, 28468, 27188, 23496, 23086, 28014, 27504, -2286, 21507, -31797, 32054, 2082, 2175, 2080, 22931, 27188, 23496, 17950, 25407, -30524, 23430, 25359, 22049, 2322, 2383, 2320, 28164, 27396, 23288, 23326, 27742, 27200, -2526, 21811, -32005, 31750, 2322, 2378, 2375, 2392, 2320, 22691, 27396, 23288, 18222, 25103, 498, 426, 423, 440, 488, 488, 498, 481, 426, 423, 440, 496, 27319, -29136, 20880, 2669, 2984, 2279, 2299, 2299, 2303, -32619, -30909, 3259, 3240, 23827, 29688, 25049, -31394, 23294, -31930, -31526, 23916, -26225, -3188, 22643, 30360, 25785, -32706, 24478, -31194, -32326, 2526, 2527, -25361, -32231, -2313, 2523, 2523, 2504, -31619, -31829, 2131, 2112, 2077, 2079, 2058, 2075, 2073, 2065, 2060, 2055, 22916, -25241, -2204, 1582, 1580, 1593, 1576, 1578, 1570, 1599, 1588, 1637, 1636, -27820, -29278, -1716, 1632, 1632, 1651, -30269, 18662, 24752, 21848, 2090, 1216, 1206, 1074, 357, 278, 273, 286, 273, 318, 272, 359, 370, 356, 1109, 
    1071, 1066, 1078, 1106, 1128, 1060, 1139, 1096, 1060, 1107, 1081, 1060, 1072, 1108, 1138, 1080, 1061, 1080, 1081, 1140, 1074, 360, 271, 266, 362, 265, 382, 362, 1703, 1730, 1728, 1697, 28557, 27152, 28248, -30011, 23204, 23362, 28283, 27706, 27480, 23204, 22775, 21195, -31336, -32178, 2486, 2469, 28516, 27385, 27569, 23117, 22625, -25470, -2431, 25262, 26419, 26235, 22407, 1065, 1081, 1026, 1060, 1075, 1042, 1060, 1061, 1145, 1144, -28344, -28738, -1200, 1148, 1148, 1135, 2781, 2783, 2754, 2773, 2772, 2711, 2690, 2690, 2761, 2754, 2704, 2773, 2767, 2781, 2780, 2699, 2782, 2756, 2777, 2760, 2704, 596, 514, 539, 529, 591, 459, 414, 386, 408, 415, 398, 392, 390, 392, 404, 464, 25940, 24009, 18608, 29269, -28793, -30639, 937, 954, 994, 1005, 1020, 967, 1003, 1010, 993, 1014, 21118, -26979, -866, 641, 654, 671, 676, 648, 657, 642, 661, 719, 718, -26626, -30456, 714, 714, 729, 26244, -27123, 1048, 2768, 32757, 21509, 590, 588, 601, 584, 612, 585, 1982, 31214, 21022, 21929, 29637, -26473, 21454, 23192, 29925, 28257, 27644, -31917, 21678, 26124, 510, 497, 508, 494, 494, 22217, 25707, 21650, 31397, -28169, 32133, 22133, 26369, 25244, -30157, 23536, 24570, 2372, 2391, 2368, 2372, 21142, 22172, 21914, 31103, -28115, 21780, 20766, 25819, 24902, -30231, 3148, 3148, 22790, 18831, 3139, 3167, 3163, 3144, 21863, 17902, 23343, 26329, -27056, 21267, 31246, -28324, 24353, 20392, 26538, 25143, -30056, 24655, 23890, 1337, 1314, 25825, 23036, 22351, 32569, -27541, 26608, 23277, 25245, 26368, -28753, -28837, -30579, 885, 870, 827, 810, 829, 825, 812, 798, 817, 820, 812, 829, 810, 21154, -27071, -958, 1628, 1613, 1626, 1630, 1611, 1657, 1622, 1619, 1611, 1626, 1613, 1559, 1558, -27866, -29232, 1554, 1554, 1537, 1954, 2025, 2038, 2026, 2029, 885, 830, 801, 829, 826, 885, 2767, 2867, 2518, 2508, 2509, 2524, 2507, 2545, 2541, 2548, 2549, 2523, 2524, 2524, 2519, 2496, 2554, 2534, 2559, 2558, 1306, 1330, 1359, 1297, 1306, 1302, 1280, 1304, 1296, 1307, 1281, 1371, 1303, 1306, 1297, 1292, 1371, 1308, 1307, 1307, 1296, 1287, 1341, 1313, 1336, 1337, 495, 433, 442, 438, 416, 440, 432, 443, 417, 507, 433, 442, 438, 416, 440, 432, 443, 417, 400, 441, 432, 440, 432, 443, 417, 507, 442, 416, 417, 432, 423, 413, 385, 408, 409, 3088, 3092, 3188, 3164, 3073, 3170, 3162, 3093, 3088, 3092, 2205, 2201, 2297, 2257, 2188, 2203, 2287, 2263, 2200, 2202, 2205, 2201, 1699, 1718, 2162, 2144, 2151, 2165, 2148, 2167, 2166, 2144, 2090, 2221, 2221, 2292, 2279, 2288, 2301, 24889, 23922, 17701, 32626, 17593, 32348, 2679, 2679, 2660, 2682, 27999, 29793, 2680, 2562, 2079, 1325, 1168, 1173, 1180, 29911, 29632, 30518, -28654, 30577, 28774, 24667, 22376, 1635, 1615, 1604, 1609, 1614, 1607, 1663, 1606, 1615, 1618, 1613, 1601, 1620, 776, 777, 795, 880, 869, -29262, -30108, 412, 399, 469, 468, 500, 479, 498, 478, 469, 468, 20555, -27480, -341, 1520, 1521, 1489, 1530, 1495, 1531, 1520, 1521, 1468, 1469, -28531, -29061, 1465, 1465, 1450, 2513, 2558, 1091, 1068, 1028, 1054, 1033, 1034, 32010, 28499, 1104, 1111, 1500, 18355, -32705, 22610, 30255, 17624, 24949, 26750, 22914, 1842, 1840, 1829, 1844, 1820, 1840, 1855, 1828, 1840, 1853, 470, 2562, 2590, 2590, 2586, 22341, 31032, 24627, 31623, 2704, 2993, 3011, 24227, 28894, 31989, 22193, 2532, 2545, 2531, -31202, 30509, 23463, 2532, 2546, 2531, 30524, -29766, 2532, 2547, 2531, 23400, 26347, 2532, 2548, 19799, -25831, 793, 798, 768, 1953, 1953, 21761, 31612, 1870, 1859, 22864, 30509, 25425, -27698, 1474, 2330, 2330, 664, 651, 709, 666, 1629, 1605, 1605, 1631, 1612, 1538, 1629, 2102, 2124, 2121, 2133, 2097, 2059, 2119, 2064, 2091, 2119, 2096, 2138, 2119, 2131, 2103, 2065, 2139, 2118, 2139, 2138, 2071, 2129, 1081, 1118, 1115, 1083, 1112, 1071, 1083, 1260, 1161, 1163, 1258, 3083, 3089, 3078, 3077, 3166, 3137, 3141, 3141, 3137, 401, 392, 1770, -28749, -30681, 3068, 2959, 3012, 3016, 3017, 3027, 3014, 3022, 3017, 3028, 2959, 2952, 2952, 3027, 3010, 3039, 3027, 2959, 2958, 2955, 2944, 1466, 1464, 1453, 1468, 1431, 1464, 1460, 1468, 2125, 2125, 2070, 2055, 2074, 2070, 2122, 2123, 890, 789, 801, 828, 801, 825, 816, 2580, 32656, 29589, 30693, 20760, 21467, 32166, -27357, 25208, 1447, 1445, 1456, 1441, 1421, 1440, 2926, 2936, 2940, 2927, 2942, 2933, 535, 814, 877, 22908, 21966, 1954, 1955, 1970, 1959, 1967, 1962, 3100, 3133, 3116, 3129, 3121, 3124, 486, 509, 506, 482, 498, 494, 483, 507, 1401, 1400, 1404, 1385, 1293, 1403, 1289, 1320, 1401, 1291, 1290, 1330, 1405, 1293, 1403, 1289, 1320, 1401, 1291, 1293, 1383, 1382, 1291, 1400, 1404, 1045, 1044, 1040, 1029, 1121, 1045, 1047, 1125, 1092, 1045, 1127, 1042, 1126, 1118, 1041, 1043, 1121, 1121, 1047, 1125, 1092, 1045, 1127, 1127, 1121, 1035, 1034, 1127, 1044, 1040, 2809, 2796, 2317, 2357, 2426, 816, 820, 887, 890, 837, 819, 833, 864, 817, 803, 835, 816, 820, 2781, 2768, 2799, 2713, 2795, 2762, 2715, 2697, 2793, 425, 495, 499, 490, 491, 2472, 1902, 1904, 1902, 1832, 1839, 1829, 1828, 1849, 2002, 1940, 1939, 1945, 1944, 1925, 1133, 1137, 277, 346, 2468, 2467, 2473, 2472, 2485, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 513, 577, -29005, -30363, 669, 654, 723, 706, 725, 721, 708, 725, 755, 721, 708, 725, 21322, -26711, -598, 658, 643, 660, 656, 645, 660, 690, 656, 645, 660, 729, 728, -26648, -30434, 732, 732, 719, -24881, 22341, 32396, 21704, -26847, 31118, 21893, -29426, 31805, 20663, -25430, -31801, 22742, 29056, -29325, 22226, 21497, -26696, 23251, -24974, 21992, 26646, 23314, 26257, 32539, -30886, 32131, -32507, -31721, 22357, -31158, 22059, 22523, 31110, 1488, 1488, 1475, 1501, 515, 537, 516, 533, 3251, 3242, 3232, 2931, 2901, 2883, 2900, 2827, 2919, 2881, 2883, 2888, 2898, 436, 406, 387, 400, 405, 405, 408, 470, 460, 471, 457, 473, 465, 430, 400, 407, 413, 406, 398, 394, 473, 439, 429, 473, 456, 457, 471, 457, 450, 473, 430, 400, 407, 463, 461, 450, 473, 385, 463, 461, 464, 473, 440, 393, 393, 405, 412, 430, 412, 411, 434, 400, 397, 470, 460, 458, 462, 471, 458, 463, 473, 465, 434, 433, 429, 436, 437, 469, 473, 405, 400, 402, 412, 473, 446, 412, 
    410, 402, 406, 464, 473, 442, 401, 395, 406, 404, 412, 470, 448, 461, 471, 457, 471, 461, 463, 457, 463, 471, 460, 461, 473, 426, 408, 415, 408, 395, 400, 470, 460, 458, 462, 471, 458, 463, 1858, 1877, 1878, 1877, 1858, 1877, 1858, 2735, 2691, 2690, 2712, 2697, 2690, 2712, 2753, 2744, 2709, 2716, 2697, 3313, 3296, 3296, 3324, 3321, 3315, 3313, 3300, 3321, 3327, 3326, 3263, 3327, 3315, 3300, 3317, 3300, 3261, 3299, 3300, 3298, 3317, 3313, 3325, 30813, 1293, 1298, 1294, 1289, 32714, 1427, 1472, 1503, 1475, 1476, 1427, 32714, 29282, 2107, 2660, 2594, 2597, 2607, 2606, 2611, 2661, 2619, 2595, 2619, 2660, 2602, 2593, 2602, 2611, 2660, 2621, 2606, 2617, 2594, 2605, 2610, 2580, 2600, 2595, 2606, 2600, 2592, 2676, 2623, 2610, 2619, 2606, 2678, 2616, 2595, 2596, 2620, 2669, 2621, 2606, 2617, 2594, 2605, 2610, 2678, 2608, 2600, 2596, 2607, 2606, 2614, 2672, 2619, 2596, 2616, 2623, 2672, 2664, 28721, 2762, 1424, 1494, 1489, 1499, 1498, 1479, 1425, 1487, 1495, 1487, 1424, 1502, 1493, 1502, 1479, 1424, 1481, 1498, 1485, 1494, 1497, 1478, 1504, 1500, 1495, 1498, 1500, 1492, 1408, 1483, 1478, 1487, 1498, 1410, 1484, 1498, 1502, 1485, 1500, 1495, 1433, 1481, 1498, 1485, 1494, 1497, 1478, 1410, 1209, 1279, 1272, 1266, 1267, 1262, 1208, 1254, 1278, 1254, 1209, 1271, 1276, 1271, 1262, 1209, 1248, 1267, 1252, 1279, 1264, 1263, 1225, 1269, 1278, 1267, 1269, 1277, 1193, 1250, 1263, 1254, 1267, 1195, 1253, 1278, 1273, 1249, 1200, 1248, 1267, 1252, 1279, 1264, 1263, 1195, 2714, 2780, 2779, 2769, 2768, 2765, 2715, 2757, 2781, 2757, 2714, 2755, 2768, 2759, 2780, 2771, 2764, 2714, 2780, 2779, 2769, 2768, 2765, 2715, 2781, 2753, 2776, 2777, 2698, 1601, 24711, 31161, 2575, 2579, 2579, 2583, 697, 1128, 1135, 1129, 2084, 2088, 2083, 2082, 2066, 2101, 2091, 1766, 1764, 1781, 1730, 1774, 1765, 1764, 1748, 1779, 1773, 1705, 1704, -27752, -29330, 1708, 1708, 1727, 1559, 1076, 553, 527, 537, 526, 593, 573, 539, 537, 530, 520, 1989, 2035, 2018, 1979, 2005, 2041, 2041, 2045, 2047, 2035, 2965, 3002, 545, 632, 565, 569, 552, 517, 558, 547, 554, 575, 632, 608, 619, 630, 632, 563, 567, 573, 632, 608, 632, 1885, 1875, 1885, 1821, 1822, 1820, 1812, 1816, 1805, 1808, 1802, 1809, 1819, 1811, 1810, 1816, 1885, 1861, 1885, 1841, 1808, 1809, 1818, 1885, 1794, 1362, 1291, 1350, 1354, 1371, 1398, 1373, 1360, 1369, 1356, 1291, 1299, 1306, 1285, 1291, 1344, 1348, 1358, 1291, 1299, 1291, 3232, 3327, 607, 590, 590, 594, 599, 605, 607, 586, 599, 593, 592, 529, 596, 589, 593, 592, 2520, 2511, 2521, 2527, 2502, 2526, 3046, 3050, 3041, 3040, 1007, 995, 995, 999, 997, 1001, 398, 411, 392, 413, 415, 398, 1301, 1298, 1301, 1298, 1299, 1299, 1629, 1631, 1614, 1662, 1627, 1614, 1627, 1609, 1554, 1555, -27869, -29227, 1559, 1559, 1540, 1506, 3229, 3225, 2247, 2239, 2227, 2240, 2245, 2232, 2246, 2224, 2212, 2226, 2232, 2229, 2225, 2421, 2400, 2411, 2418, 2409, 2413, 1323, 1321, 1333, 1329, 1314, 1325, 1605, 1631, 1612, 1627, 1631, 1603, 2309, 2333, 2322, 2335, 2317, 2317, 2307, 31949, -32706, 23455, 1509, -30767, 30434, 23144, 32118, 22322, 662, 750, 21250, -26717, 30386, -30143, 21883, 26872, 30082, 24178, 28791, -25819, 20604, 22826, 30551, 24353, 29404, 3247, 21445, 24935, 29693, -26449, 29917, 24365, 23723, 29014, 1312, 1312, 2334, 2334, 2325, 378, 1518, 1428, 1433, 1620, 24816, 25965, 32679, 21987, 2751, 2751, 24334, 22773, 2740, 30883, 27223, 2740, 22586, 17870, 2740, 29507, 21737, 2740, 22773, 27223, 2740, 26762, 17435, 2740, -32268, 22968, 2740, 30781, 30200, 2740, 22586, 32681, 2740, 21461, 21737, 2740, 25076, 17714, 2740, 23296, -25349, 2740, 27960, 26762, 2740, 27330, 27268, 2740, 27198, 32515, 2740, -25152, 27831, 2740, 22902, -32169, 2740, 22804, 22880, 2740, -31422, 22586, 2740, 23469, 28791, 2740, 17844, 32404, 2798, 2798, -31412, 29823, 22773, 2751, 2751, 22902, -32169, 2740, 29644, -32433, 2740, 26762, 17435, 2740, 23268, 23133, 2740, 30883, 27223, 2740, 24334, 22773, 2740, 20772, 21567, 2740, 30781, 30200, 2740, 27198, 32515, 2740, 27330, 27268, 2740, 25076, 17714, 2740, 22586, 17870, 2740, 21461, 21737, 2740, 22773, 27223, 2740, 17844, 32404, 2740, 22804, 22880, 2798, 2798, 29806, -30488, 2751, 2751, -29789, 22897, 29522, 2740, 32141, 17448, 29522, 2740, 27223, 27533, 2740, 28503, 25770, 2740, -25247, 17602, 2740, -30580, -31526, 2740, 29980, -28083, 2740, 29752, 20748, 2740, 32653, 26537, 2798, 2798, 22586, 26041, 2751, 2751, 29507, 21737, 2740, 31359, -32046, 2740, 28300, 29059, 2740, 23296, -25349, 2740, 25267, 23679, 2740, 22586, 17870, 2740, -31422, 22586, 2798, 2798, 29752, 21959, 30933, 2751, 2751, 29752, 21959, 2740, 22804, 22880, 2740, 17842, -32478, 2740, -25247, 17602, 2740, 25054, -30580, 2740, 32127, 30933, 2740, 29507, 21737, 24253, 23223, 31882, -26664, 20705, 21739, 21468, 32289, 29444, 22848, 1564, 1564, 24342, -28553, 1559, -24664, 26654, 1559, 21953, 26703, 1559, 31167, 20684, 1559, 27364, 20684, 1559, -31552, 20684, 1559, 25556, 24861, 1559, -28200, 20684, 1559, 22918, 20684, 1559, 27329, 20684, 1559, 21825, 22679, 1559, 18933, 31078, 25502, 1559, 26430, 24342, 21528, 1559, -28850, 30172, 29800, 1559, 21649, 25806, 24342, 1613, 1613, -30225, 30940, 21590, 1564, 1564, 24342, -28553, 1559, -24664, 26654, 1559, 21953, 26703, 1559, 31167, 20684, 1559, 27364, 20684, 1559, -31552, 20684, 1559, 25556, 24861, 1559, -28200, 20684, 1559, 22918, 20684, 1559, 27329, 20684, 1559, 21825, 22679, 1559, 18933, 31078, 25502, 1559, 26430, 24342, 21528, 1559, -28850, 30172, 29800, 1559, 21649, 25806, 24342, 1613, 1613, 30925, -31669, 1564, 1564, 24342, -28553, 1559, -24664, 26654, 1559, 21953, 26703, 1559, 25556, 24861, 1559, -28200, 20684, 1559, 31167, 20684, 1559, -31552, 20684, 1613, 1613, 21657, 26906, 1564, 1564, 24342, -28553, 1559, 25556, 24861, 1559, -28200, 20684, 1559, 31167, 20684, 1559, -31552, 20684, 1559, 27364, 20684, 1613, 1613, 30875, 22884, 29814, 1564, 1564, 24342, -28553, 1559, -24664, 26654, 1559, 21953, 26703, 1559, 31167, 20684, 1559, 27364, 20684, 1559, -31552, 20684, 1559, 25556, 24861, 1559, -28200, 20684, 1559, 22918, 20684, 1559, 27329, 20684, 1559, 21825, 22679, 1559, 18933, 31078, 25502, 1559, 26430, 24342, 21528, 1559, -28850, 30172, 29800, 1559, 21649, 25806, 24342, 23342, 19367, 26198, -26913, 32161, -26893, 22670, 18439, 21239, 32522, 1215, 27606, 22219, 30909, -27665, 24692, 23913, 22507, 31254, 
    25514, -27736, 1656, 1576, 1589, 1585, 1593, 1663, 18662, 27208, 1656, 1588, 1589, 1576, 1583, 1663, -29288, 21594, 1656, 1583, 1599, 1587, 1582, 1593, 29135, 26684, 20912, 32717, 32469, 26406, 24234, 28887, 3289, 3294, 3264, 30684, 28207, 22435, 31198, -28325, 26112, 21902, 29541, 21608, 30466, 31376, 23407, 30333, 24201, 31002, 32358, 31748, 24104, 31163, 22018, 22079, 1180, 877, 873, 2935, 2931, 2918, 2821, 2941, 2929, 2935, 2931, 2918, 2928, 2938, 2935, 2931, 3193, 3180, 965, 989, 991, 970, 987, 1015, 986, 963, -30640, -28794, 1150, 1133, 1076, 1078, 1063, 1045, 1082, 1087, 1063, 1078, 1057, 1047, 1074, 1063, 1074, 21929, -28342, -1207, 1936, 1938, 1923, 1969, 1950, 1947, 1923, 1938, 1925, 1971, 1942, 1923, 1942, 2015, 2014, -27922, -29672, 2010, 2010, 1993, 3022, 2087, 2083, 2090, 2081, 2087, 2083, 2102, 2080, 2133, 2093, 2678, 2683, 2687, 2735, 2746, 996, 996, 2546, 2546, 932, 900, 932, 900, 3063, 1501, 1501, 1393, 1396, 1377, 1396, 1804, 601, 588, 793, 797, 875, 876, 799, 793, 797, 776, 798, 875, 874, 793, 797, 807, 800, 853, 849, 2588, 2670, 1908, 1326, 1302, 1369, 1292, 1290, 1294, 1293, 1288, 1290, 1294, 3052, 3048, 3054, 3050, 3052, 3048, 3051, -31166, -32364, 2668, 2687, 2598, 2596, 2613, 2571, 2610, 2606, 2607, 2560, 2611, 2611, 2592, 2616, 23483, -24744, -2725, 1674, 1672, 1689, 1703, 1694, 1666, 1667, 1708, 1695, 1695, 1676, 1684, 1733, 1732, -27660, -29438, -1556, 1728, 1728, 1747, 25844, 24937, 3031, 3027, 3025, 2981, 2978, 17724, 3014, 27910, 26779, 2978, 3011, -2845, 2980, 2978, 2983, 2981, 2980, 2980, 3026, 3014, 2981, 2980, 3024, 3031, 3027, 2229, 2208, 2246, 2241, 18015, 2213, 28261, 27640, 2241, 2208, -2176, 2247, 2226, 2241, 2244, 2246, 2247, 2247, 2225, 2213, 2227, 2246, 2247, 1191, 1798, 1905, 2317, 2314, 2324, 2370, 802, 885, 883, 868, 828, 3129, 3137, 3094, 3088, 3079, 3129, 3167, 2875, 2855, 2855, 2851, 814, -32606, 28369, 1808, 25185, -24736, 775, 775, 1744, 1749, 1728, 1749, 1640, 1563, 3165, 290, 291, 290, 336, 2620, 1098, 1594, 1598, 1608, 1596, 1596, 1594, 1598, 1579, 1597, 1608, 1597, 1594, 1598, 2618, 2607, 1603, 1591, 1585, 1589, -28982, -30436, 740, 759, 686, 684, 701, 643, 698, 678, 679, 648, 699, 699, 680, 688, 666, 701, 699, 672, 679, 686, 648, 682, 701, 672, 678, 679, 21299, -26672, -557, 1672, 1674, 1691, 1701, 1692, 1664, 1665, 1710, 1693, 1693, 1678, 1686, 1724, 1691, 1693, 1670, 1665, 1672, 1710, 1676, 1691, 1670, 1664, 1665, 1735, 1734, -27658, -29440, -1554, 1730, 1730, 1745, 3199, 3199, 665, 668, 649, 668, 1674, 1755, 1730, 1758, 1759, 1674, 1671, 3119, 3165, 1181, 1180, 2338, 2341, 2865, -31308, -32158, 2458, 2441, 2512, 2514, 2499, 2557, 2500, 2520, 2521, 2532, 2499, 2501, 2526, 2521, 2512, 22605, -25426, -2387, 1676, 1678, 1695, 1697, 1688, 1668, 1669, 1720, 1695, 1689, 1666, 1669, 1676, 1731, 1730, -27662, -29436, -1558, 1734, 1734, 1749, 992, 2406, 2336, 2343, 2349, 2348, 2353, 2407, 2361, 2337, 2361, 2406, 2344, 2339, 2344, 2353, 2406, 2367, 2348, 2363, 2336, 2351, 2352, 2326, 2346, 2337, 2348, 2346, 2338, 2422, 2365, 2352, 2361, 2348, 2420, 2362, 2348, 2344, 2363, 2346, 2337, 2415, 2367, 2348, 2363, 2336, 2351, 2352, 2420, 430, 488, 495, 485, 484, 505, 431, 497, 489, 497, 430, 480, 491, 480, 505, 430, 503, 484, 499, 488, 487, 504, 478, 482, 489, 484, 482, 490, 446, 501, 504, 497, 484, 444, 498, 489, 494, 502, 423, 503, 484, 499, 488, 487, 504, 444, 3050, 2976, 3005, 2993, 2976, 2987, 2977, 3050, 2995, 2976, 2999, 2982, 2986, 2977, 2976, 3050, 2982, 2989, 2976, 2982, 2990, 3051, 2997, 2989, 2997, 3066, 2993, 2987, 2970, 2999, 3064, 3116, 3178, 3181, 3175, 3174, 3195, 3117, 3187, 3179, 3187, 3116, 3189, 3174, 3185, 3178, 3173, 3194, 3116, 3178, 3181, 3175, 3174, 3195, 3117, 3179, 3191, 3182, 3183, 3132, 1040, 1114, 1095, 1099, 1114, 1105, 1115, 1040, 1097, 1114, 1101, 1116, 1104, 1115, 1114, 1040, 1099, 1105, 1116, 1104, 1115, 1114, 1041, 1103, 1111, 1103, 1024, 28416, 30270, 2540, 2544, 2544, 2548, 32620, 2804, 2285, 2282, 2284, 1858, 1870, 1861, 1860, 1908, 1875, 1869, 2574, 2572, 2589, 2598, 2570, 2587, 2620, 2587, 2565, 2625, 2624, -24720, -32378, 2628, 2628, 2647, 26137, 32551, -30222, 28231, 23345, 28594, 30348, -32679, 26604, 21146, 22636, 28382, 2095, 2105, 2109, 2094, 2111, 2100, 2051, 2100, 2105, 2109, 2104, 2105, 2094, 2484, 2479, 2434, 2438, 2435, 2434, 2453, 2452, 26578, 32492, -31974, 25775, 20953, -28994, 26891, 23677, 22155, 24633, 284, 264, 1214, 1171, 1175, 1170, 1171, 1156, 1157, 2384, 2422, 2400, 2423, 2372, 2402, 2400, 2411, 2417, 2137, 2675, 2327, 2340, 2396, 2396, -2091, -2091, 1478, 1504, 1526, 1505, 1470, 1490, 1524, 1526, 1533, 1511, 3028, 2951, 923, 951, 951, 947, 945, 957, 2014, 2025, 2026, 2025, 2046, 2025, 2046, 749, 686, 2683, 1874, 646, 642, 640, 704, 732, 732, 728, 731, 663, 756, 658, 647, 647, 755, 758, 647, 757, 643, 641, 647, 646, 642, 1978, 1967, 2052, 2048, 32031, -30405, 2057, 2014, 2010, 26043, 24778, 2003, 3163, 3167, 3114, 3104, 3124, 3158, 3227, 3299, 2383, 2371, 2371, 2375, 2373, 2377, 29620, 32244, 21722, 28103, 29945, 719, 490, 2306, 404, 30328, 22330, -25057, -28846, 25693, -32550, 24442, 2816, 2858, 2878, -30568, 28461, 23131, -29126, 27023, 23801, 22031, 24765, 535, 515, 1197, 1152, 1156, 1153, 1152, 1175, 1174, 1072, 1046, 1024, 1047, 1060, 1026, 1024, 1035, 1041, 2032, 2060, 760, 760, 1821, -2636, -2636, 1477, 2473, 1954, 2672, 2674, 2687, 2676, 2673, 2680, 2658, 2664, 2684, 1121, 1091, 1110, 1093, 1088, 1088, 1101, 1027, 1049, 1026, 1052, 1036, 1028, 1120, 1093, 1090, 1113, 1108, 1047, 1036, 1133, 1090, 1096, 1118, 1091, 1093, 1096, 1036, 1053, 1053, 1047, 1036, 1131, 1092, 1108, 1093, 1036, 1134, 1113, 1093, 1088, 1096, 1027, 1150, 1127, 1149, 1053, 1026, 1054, 1052, 1052, 1044, 1054, 1050, 1026, 1052, 1052, 1054, 1047, 1036, 1115, 1114, 1029, 1036, 1133, 1116, 1116, 1088, 1097, 1147, 1097, 1102, 1127, 1093, 1112, 1027, 1049, 1055, 1051, 1026, 1055, 1050, 1036, 1028, 1127, 1124, 1144, 1121, 1120, 1024, 1036, 1088, 1093, 1095, 1097, 1036, 1131, 1097, 1103, 1095, 1091, 1029, 1036, 1146, 1097, 
    1118, 1119, 1093, 1091, 1090, 1027, 1048, 1026, 1052, 1036, 1135, 1092, 1118, 1091, 1089, 1097, 1027, 1051, 1050, 1026, 1052, 1026, 1055, 1044, 1052, 1045, 1026, 1044, 1045, 1036, 1121, 1091, 1102, 1093, 1088, 1097, 1036, 1151, 1101, 1098, 1101, 1118, 1093, 1027, 1049, 1055, 1051, 1026, 1055, 1050, 27182, 28511, 31920, -30572, 955, 936, 948, 958, 938, 1801, 1839, 1849, 1838, 1905, 1821, 1851, 1849, 1842, 1832, 2844, 1710, 1672, 1694, 1673, 1750, 1722, 1692, 1694, 1685, 1679, 1759, 1606, 1602, 1597, 1563, 1549, 1562, 1605, 1577, 1551, 1549, 1542, 1564, 1588, 1612, 1600, 1606, 1602, 1623, 1601, 1611, 1606, 1602, 725, 704, 1775, 1741, 1752, 1739, 1742, 1742, 1731, 1677, 1687, 1676, 1682, 1666, 1674, 1781, 1739, 1740, 1734, 1741, 1749, 1745, 1666, 1772, 1782, 1666, 1683, 1682, 1676, 1682, 1689, 1666, 1781, 1739, 1740, 1684, 1686, 1689, 1666, 1754, 1684, 1686, 1675, 1666, 1763, 1746, 1746, 1742, 1735, 1781, 1735, 1728, 1769, 1739, 1750, 1677, 1687, 1681, 1685, 1676, 1681, 1684, 1666, 1674, 1769, 1770, 1782, 1775, 1774, 1678, 1666, 1742, 1739, 1737, 1735, 1666, 1765, 1735, 1729, 1737, 1741, 1675, 1666, 1761, 1738, 1744, 1741, 1743, 1735, 1677, 1691, 1686, 1676, 1682, 1676, 1686, 1684, 1682, 1684, 1676, 1687, 1686, 1666, 1777, 1731, 1732, 1731, 1744, 1739, 1677, 1687, 1681, 1685, 1676, 1681, 1684, 1307, 1305, 1292, 1309, 1311, 1303, 1290, 1281, 1339, 1303, 1302, 1292, 1309, 1302, 1292, 1360, 1292, 1297, 1308, 1349, 3138, 3150, 3102, 3081, 3155, 1734, 1738, 1676, 1667, 1670, 1694, 1679, 1688, 1751, 1267, 1279, 1210, 1191, 1195, 1210, 1201, 1211, 1250, 2838, 1681, 2362, 811, 811, 811, 1089, 1094, 1088, 2546, 2558, 2549, 2548, 2500, 2531, 2557, -31595, 23139, -28278, -32569, 29447, -30056, -28932, 20490, -25629, -30034, 31086, 26087, 22942, -28230, -32521, 17716, 27828, -28414, -32689, 32232, -25908, 28662, -29839, -28959, -30409, 719, 732, 661, 647, 640, 692, 651, 647, 661, 678, 651, 643, 654, 653, 645, 30083, 30146, -26629, -520, 2683, 2665, 2670, 2650, 2661, 2665, 2683, 2632, 2661, 2669, 2656, 2659, 2667, 32109, 32044, -24811, -32285, 2593, 2593, 2610, -31399, -32113, 2423, 2404, -27690, -32101, 22688, -25533, -2496, -28031, -31796, -25324, -31774, 2080, 2080, 2099, 1856, 3047, 1194, 1202, 1214, 1205, 1204, 1196, 28530, 30284, 1526, 1469, 1442, 1470, 1465, 1526, 3029, -28073, -31974, 20970, -31234, -24838, -28745, 31397, 25578, 1115, 1115, 1096, 1110, -30561, -28855, 1201, 1186, 1259, 1273, 1278, 1226, 1269, 1273, 1259, 1240, 1269, 1277, 1264, 1267, 1275, -25072, -28835, 20626, 1260, 1267, 1263, 1256, -28283, -1146, 2389, 2375, 2368, 2420, 2379, 2375, 2389, 2406, 2379, 2371, 2382, 2381, 2373, -27730, -32029, 23852, 2386, 2381, 2385, 2390, -25541, -32051, 2319, 2319, 2332, 2162, 2161, 2144, 2167, 2172, 1362, 1361, 1344, 1367, 1372, 1380, 1371, 1351, 1344, 1431, 1430, 1412, 1519, 1530, 3191, 3187, 3173, 2365, 2361, 2351, 2387, 2367, 2344, 2350, 2387, 2348, 2359, 2367, 2351, 2377, 2348, 2333, 2328, 2328, 2325, 2322, 2331, 2323, 2322, 2324, 2309, 2318, 2311, 2307, 2399, 2398, -25490, -32104, 2394, 2394, 2377, 2749, 2745, 2735, 2771, 2751, 2728, 2734, 2771, 2732, 2743, 2751, 2735, 2761, 2732, 2717, 2712, 2712, 2709, 2706, 2715, 703, 699, 685, 801, 810, 807, 822, 829, 820, 816, 876, 877, -27043, -30549, 873, 873, 890, 1706, 1718, 1718, 1714, 28843, 26968, 20692, 32425, 31019, 24792, 22868, 30505, 2855, 2848, 2878, 29581, 27262, 21490, 32143, -27382, 25169, -29898, 24458, -25036, 21976, 31653, -30039, 24085, -24661, 32735, 510, 486, 508, 487, 486, 502, 490, 2960, 2975, 2948, 2949, 2946, 2950, 2967, 2961, 2963, 1184, 2236, 2217, 3308, 1963, 846, 842, 1960, 1964, 1977, 2010, 1954, 1966, 1960, 1964, 1977, 1967, 1957, 1960, 1964, 2081, 2721, 3256, 3260, 3277, 3274, 3277, 3306, 3274, 3306, 3275, 3256, 3260, 3262, 3326, 3298, 3298, 3302, 3277, 3272, 3274, 3275, 3275, 3260, 3263, 3274, 3275, 3241, 3256, 3260, 577, 590, 597, 596, 595, 631, 582, 576, 578, 538, 2783, 2815, 2783, 2815, 658, 690, 437, 435, 439, 436, 454, 449, 454, 481, 449, 481, 448, 435, 439, 513, 1187, 523, 531, 529, 516, 533, 569, 532, 525, 1002, 1010, 1008, 997, 1012, 961, 1014, 1004, 2088, 2063, 2140, 2138, 2142, 2123, 2141, 2088, 2057, 836, 3026, 2969, 2950, 2970, 2973, 2940, 2932, 3195, 2574, 2561, 2572, 2563, 2647, 2626, 2626, 2561, 2562, 2574, 2572, 2561, 2565, 2562, 2590, 2585, 2626, 984, 983, 986, 981, 897, 916, 916, 488, 32265, 22009, 32358, -27340, 24987, 23887, 28206, 21242, 28197, 23307, 22555, 30310, -32261, 27352, 21777, 17816, 23558, 22540, 24459, 27491, 18128, 26623, 31997, 18870, 3207, 3225, 2025, 1932, 3050, 3061, 466, 465, 3019, 3018, 550, 542, 22777, -26247, 22158, 25065, 2288, 2217, 2321, 2332, 2325, 2304, 2362, 2307, 2313, 2308, 2306, -25583, -25102, 1036, 1612, 1558, 3158, 3087, 23142, -32743, 23159, 29706, 1699, 1696, 1707, 1705, 1696, 1708, 3092, 1942, 2030, 2194, 2207, 2198, 2179, 2233, 2184, 2183, 2187, 2179, 2180, 2185, 2176, 2197, 2223, 2201, 2196, 2706, 2717, 2704, 2690, 2690, 1153, 1166, 1163, 1171, 1154, 1173, 1155, 1158, 1171, 1158, 2969, 2966, 2963, 2955, 2970, 2957, 31386, -28216, 25777, 25263, 1754, 1730, 1741, 1728, 1746, 1746, 1756, 608, 634, 617, 638, 634, 614, 572, 574, 546, 550, 565, 570, 2570, 2579, 2568, 2572, 31182, -28004, 22981, 20627, 32494, 22168, 31589, 691, 687, 687, 683, 3307, 3300, 3305, 3302, 2095, 2098, 2110, 1962, 1974, 1974, 1970, 2040, 2029, 2029, 1181, 2294, 2239, 2224, 2229, 2236, 2294, 781, 770, 775, 799, 782, 793, 792, -29308, -30126, 426, 441, -32208, 21073, 31452, -28274, 20605, -27490, -355, -31448, 21833, 32196, -26986, -27770, -29328, -1634, 1714, 1714, 1697, -31275, -32253, 2555, 2536, 2494, 2489, 2491, 2483, 2453, 2489, 2488, 2466, 2483, 2488, 2466, 22572, -25393, -2356, 591, 584, 586, 578, 612, 584, 585, 595, 578, 585, 595, 527, 526, -26818, -30264, -730, 522, 522, 537, 2159, 2071, 2597, 2598, 2605, 2607, 2598, 2602, 22942, -31775, 22927, 30706, 2638, -24831, -24862, 29086, -27493, 308, 307, 305, 313, 287, 307, 306, 296, 313, 306, 296, 2946, 2969, 2974, 2948, 2952, 2964, 1680, 1684, -27982, -27823, 432, 436, 1314, 769, 853, 832, 2376, 2352, 2364, 2362, 2366, 2347, 2365, 
    2359, 2362, 2366, 2825, 2829, 1745, 1769, 1702, -31415, -32097, 2407, 2420, -29955, 23196, -28452, -28353, -31730, 26586, 22704, -25517, -2480, -29943, 23400, -28376, -28469, -31238, 26158, -25177, -31919, -2113, 2195, 2195, 2176, 1898, 2804, 3041, 3167, 923, 1489, 2532, 1877, 787, 1447, 1849, 1148, 1079, 1807, -26136, 23048, 871, 520, 532, 532, 528, 1590, 1582, 1580, 1593, 1576, 1540, 1577, 1584, 20948, 32681, 935, 928, 958, 970, 301, 349, 1246, -29296, 28327, -26838, 30985, 1538, 1567, 1555, -29631, 28534, -26885, 30936, 2003, 1998, 1986, 1947, 1947, 1928, 3189, 3160, 32372, 30419, 24543, -3290, 519, 539, 539, 543, 652, 640, 646, 655, 644, 661, 20859, 26396, -28813, 548, 539, 534, 535, 541, 564, 541, 512, 543, 531, 518, 2875, 2917, 2851, 2926, 2933, 2936, 2875, 2854, 2914, 2933, 2936, 2864, 2874, 2848, 2933, 2936, 2875, 2854, 2917, 2933, 2936, 2875, 2914, 2871, 2933, 2875, 2871, 2865, 2872, 2867, 2850, 2924, 2933, 2867, 2866, 2916, 2877, 2924, 2933, 2864, 2850, 2854, 2924, 2933, 2850, 2878, 2851, 2872, 2866, 2867, 2852, 2924, 2933, 2854, 2851, 2853, 2878, 2924, 2933, 2850, 2848, 2868, 2873, 2862, 2939, 2862, 2865, 2924, 2890, -31391, 25666, -32405};
    private Context C;
    private PushAgent D;
    private String G;
    private String b;
    private int e;
    private String o;
    private boolean a = false;
    private String c = "";
    private boolean d = false;
    private String f = "";
    private String g = null;
    private boolean h = false;
    private boolean i = false;
    private boolean j = false;
    private List<String> k = null;
    private JSONObject l = null;
    private boolean m = false;
    private String n = "";
    private int p = 0;
    private boolean q = false;
    private String r = "";
    private String s = "";
    private boolean t = false;
    private int u = 0;
    private int v = 3;
    private String w = "";
    private String x = "";
    private boolean y = false;
    private String z = "";
    private String A = "";
    protected JSONObject B = null;
    private boolean E = true;
    private HashMap<String, String> F = null;
    private int H = 0;
    private SpiderApi I = null;
    private String J = C0246.m1257(f36short, 0, 4, 2387);

    /* JADX WARN: Removed duplicated region for block: B:36:0x0190 A[Catch: Exception -> 0x01e9, LOOP:1: B:34:0x018d->B:36:0x0190, LOOP_END, TryCatch #0 {Exception -> 0x01e9, blocks: (B:3:0x0034, B:6:0x00ad, B:8:0x00b3, B:10:0x00c7, B:11:0x00cd, B:13:0x00d4, B:15:0x00ee, B:16:0x00f4, B:18:0x00fa, B:21:0x0111, B:23:0x0119, B:37:0x01a5, B:24:0x0138, B:25:0x014e, B:27:0x0165, B:29:0x016f, B:32:0x0187, B:34:0x018d, B:36:0x0190), top: B:48:0x0034 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private org.json.JSONObject A(java.lang.String r68, java.lang.String r69, java.lang.String r70, java.lang.String r71) {
        /*
            Method dump skipped, instructions count: 568
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.A(java.lang.String, java.lang.String, java.lang.String, java.lang.String):org.json.JSONObject");
    }

    private String B(String str) {
        return C(str, "");
    }

    private String C(String str, String str2) {
        String str3;
        JSONObject jSONObject;
        String m1250;
        String optString = this.B.optString(str);
        String str4 = "";
        if (str.equals(C0244.m1250(f36short, 67, 5, 2634)) && optString.isEmpty()) {
            optString = this.B.optString(C0240.m1237(f36short, 72, 6, 1904));
            if (optString.isEmpty()) {
                optString = this.B.optString(C0243.m1246(f36short, 78, 4, 2433));
                if (optString.isEmpty()) {
                    optString = this.B.optString(C0249.m1265(f36short, 82, 3, 2347));
                    if (optString.isEmpty()) {
                        optString = this.B.optString(C0252.m1274(f36short, 85, 7, 610));
                        if (optString.isEmpty()) {
                            String optString2 = this.B.optString(C0242.m1245(f36short, 92, 5, 1504));
                            if (optString2.isEmpty()) {
                                optString2 = this.B.optString(C0252.m1274(f36short, 97, 4, 1210));
                                boolean isEmpty = optString2.isEmpty();
                                String m1267 = C0250.m1267(f36short, 101, 4, 2096);
                                if (isEmpty || !optString2.startsWith(m1267)) {
                                    optString2 = this.B.optString(C0243.m1246(f36short, 105, 3, 1625));
                                    if (optString2.isEmpty()) {
                                        optString2 = this.B.optString(C0251.m1271(f36short, 108, 9, 2842));
                                        if (optString2.isEmpty()) {
                                            optString2 = this.B.optString(C0250.m1267(f36short, 117, 7, 1686));
                                            if (optString2.isEmpty()) {
                                                optString2 = this.B.optString(C0243.m1246(f36short, 124, 5, 2391));
                                                if (!optString2.startsWith(m1267)) {
                                                    optString2 = "";
                                                }
                                                if (optString2.isEmpty()) {
                                                    optString2 = this.B.optString(C0252.m1274(f36short, 129, 4, 2406));
                                                    if (!optString2.startsWith(m1267)) {
                                                        optString2 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            int indexOf = optString2.indexOf(C0249.m1265(f36short, 133, 10, 838));
                            optString = optString2.replaceAll(indexOf > 0 ? C0249.m1265(f36short, 145, 32, 2848) : C0238.m1232(f36short, 177, 22, 2424), C0240.m1237(f36short, 143, 2, 2087));
                        }
                    }
                }
            }
        }
        if (str.equals(C0245.m1252(f36short, 199, 2, 1865))) {
            if (optString.isEmpty()) {
                optString = this.B.optString(C0251.m1271(f36short, 205, 4, 2468));
                if (optString.isEmpty()) {
                    optString = this.B.optString(C0244.m1250(f36short, 216, 10, 333));
                    if (!optString.isEmpty()) {
                        jSONObject = this.B;
                        m1250 = C0244.m1250(f36short, 226, 11, 2191);
                    }
                } else {
                    jSONObject = this.B;
                    m1250 = C0241.m1242(f36short, 209, 7, 848);
                }
                optString = R(optString, jSONObject.optString(m1250));
            } else if (optString.indexOf(C0240.m1237(f36short, 201, 1, 2068)) >= 0) {
                jSONObject = this.B;
                m1250 = C0251.m1271(f36short, 202, 3, 2155);
                optString = R(optString, jSONObject.optString(m1250));
            }
        }
        boolean isEmpty2 = optString.isEmpty();
        String m1262 = C0248.m1262(f36short, 237, 1, 2460);
        if (isEmpty2 || optString.equals(m1262)) {
            return (str.equals(C0248.m1262(f36short, 256, 4, 524)) && optString.equals(m1262)) ? "" : str2;
        } else if (str.equals(C0240.m1237(f36short, 238, 2, 617)) || str.equals(C0241.m1242(f36short, 240, 2, 2320)) || str.equals(C0249.m1265(f36short, 242, 2, 3090)) || str.equals(C0252.m1274(f36short, 244, 2, 2365)) || str.equals(C0243.m1246(f36short, 246, 2, 3134))) {
            return optString;
        } else {
            String m1242 = C0241.m1242(f36short, 248, 2, 477);
            if (optString.indexOf(m1242) >= 0) {
                String m1258 = C0247.m1258(f36short, 250, 2, 1160);
                if (optString.indexOf(m1258) >= 0) {
                    String[] split = optString.split(C0249.m1265(f36short, 252, 4, 3163));
                    int length = split.length;
                    int i = 0;
                    while (true) {
                        if (i < length) {
                            String str5 = split[i];
                            if (str5.indexOf(this.r) >= 0) {
                                str3 = str5.split(m1258)[1];
                                break;
                            }
                            i++;
                        } else if (optString.indexOf(m1242) >= 0) {
                            String[] split2 = split[0].split(m1258);
                            str3 = split2.length > 1 ? split2[1] : split2[0];
                        }
                    }
                    return str3;
                }
            }
            str4 = optString;
            return str4;
        }
    }

    private String D(String str, String str2, String str3) {
        return C(str, C(str2, str3));
    }

    private String E(String str, String str2, String str3, String str4) {
        return C(str, C(str2, C(str3, str4)));
    }

    private String F(String str, String str2, String str3, String str4, String str5) {
        return C(str, C(str2, C(str3, C(str4, str5))));
    }

    private String G(String str, String str2, String str3, String str4, String str5, String str6) {
        return C(str, C(str2, C(str3, C(str4, C(str5, str6)))));
    }

    private String H(String str, String str2, String str3, String str4, String str5, String str6) {
        return C(str, C(str2, C(str3, C(str4, C(str5, C(str6, ""))))));
    }

    private String K(String str) {
        Charset charset;
        String str2 = str;
        String m1258 = C0247.m1258(f36short, 260, 3, 3217);
        if (str2.indexOf(m1258) >= 0) {
            StringBuilder b = d.b("");
            b.append(new Date().getTime());
            str2 = str2.replace(m1258, b.toString());
        }
        if (str2.indexOf(C0240.m1237(f36short, 263, 6, 986)) > 0) {
            String str3 = this.J;
            String m12582 = C0247.m1258(f36short, 269, 4, 3071);
            if (!m12582.equals(str3)) {
                str2 = str2.replace(m12582, this.J);
            }
        }
        if (str2.indexOf(C0245.m1252(f36short, 273, 4, 1616)) > 0) {
            String replaceAll = str2.replaceAll(C0242.m1245(f36short, 277, 12, 1641), C0245.m1252(f36short, 289, 2, 720));
            if (replaceAll.indexOf(C0242.m1245(f36short, 291, 4, 781)) > 0) {
                replaceAll = replaceAll.split(C0246.m1257(f36short, 295, 1, 502))[0];
                charset = m.c;
            } else {
                charset = m.b;
            }
            str2 = str2.replaceAll(C0250.m1267(f36short, 296, 10, 883), m.a(replaceAll, charset));
        }
        if (str2.indexOf(C0241.m1242(f36short, 306, 5, 423)) > 0) {
            String[] split = str2.split(C0250.m1267(f36short, 311, 7, 2070));
            if (split.length > 1) {
                if (str2.indexOf(C0240.m1237(f36short, 318, 5, 900)) <= 0) {
                    return split[0] + j(split[1]);
                }
                String[] split2 = split[1].split(C0243.m1246(f36short, 323, 7, 626));
                if (split2.length > 1) {
                    return split[0] + c0(j(split2[0]), split2[1], "").get(0).trim();
                }
                return split[0] + j(split2[0]);
            }
            return split[0];
        }
        return str2;
    }

    private String L(String str) {
        if (str.length() < 1) {
            return str;
        }
        String replaceAll = str.replaceAll(C0252.m1274(f36short, 330, 22, 2252), "");
        String m1267 = C0250.m1267(f36short, 352, 7, 1034);
        String m1232 = C0238.m1232(f36short, 359, 1, 1899);
        String replaceAll2 = replaceAll.replaceAll(m1267, m1232).replaceAll(C0249.m1265(f36short, 360, 4, 348), "");
        String m1265 = C0249.m1265(f36short, 364, 1, 1924);
        String m1258 = C0247.m1258(f36short, 365, 3, 3253);
        String replaceAll3 = replaceAll2.replaceAll(m1265, m1258).replaceAll(C0250.m1267(f36short, 368, 3, 2896), "").replaceAll(m1258, m1265).replaceAll(C0247.m1258(f36short, 371, 2, 735), m1232);
        while (replaceAll3.startsWith(m1232)) {
            replaceAll3 = replaceAll3.substring(1, replaceAll3.length());
        }
        while (replaceAll3.endsWith(m1232)) {
            replaceAll3 = replaceAll3.substring(0, replaceAll3.length() - 1);
        }
        return replaceAll3;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(32:1|2|3|4|(3:6|(1:8)|9)(2:98|(2:100|(1:102))(1:103))|10|(21:15|16|17|(1:19)|21|22|23|(12:30|31|(1:33)(1:64)|34|(1:63)(1:38)|39|(1:41)|42|(3:51|52|(2:54|(2:56|58)(1:60))(1:61))|62|52|(0)(0))|65|31|(0)(0)|34|(1:36)|63|39|(0)|42|(5:44|46|51|52|(0)(0))|62|52|(0)(0))|67|(1:69)|70|(1:72)(10:77|(1:79)|80|(1:82)(1:97)|83|(1:85)(1:96)|(3:93|(1:95)|92)(1:89)|90|91|92)|(1:76)|16|17|(0)|21|22|23|(15:25|27|30|31|(0)(0)|34|(0)|63|39|(0)|42|(0)|62|52|(0)(0))|65|31|(0)(0)|34|(0)|63|39|(0)|42|(0)|62|52|(0)(0)) */
    /* JADX WARN: Removed duplicated region for block: B:107:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x03aa A[Catch: JSONException -> 0x03d1, Exception -> 0x05da, TRY_LEAVE, TryCatch #0 {JSONException -> 0x03d1, blocks: (B:53:0x0391, B:55:0x03aa), top: B:103:0x0391 }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0432  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0434 A[Catch: Exception -> 0x05da, TryCatch #1 {Exception -> 0x05da, blocks: (B:3:0x0105, B:6:0x01ff, B:8:0x0208, B:9:0x0212, B:16:0x0246, B:18:0x0252, B:53:0x0391, B:55:0x03aa, B:57:0x03d3, B:60:0x03f0, B:62:0x03fa, B:67:0x0417, B:71:0x045a, B:73:0x0462, B:77:0x046d, B:79:0x0488, B:80:0x04a3, B:82:0x0504, B:84:0x0565, B:86:0x057e, B:91:0x059b, B:93:0x05b6, B:95:0x05d3, B:70:0x0434, B:22:0x0270, B:24:0x029c, B:25:0x029e, B:27:0x02ac, B:50:0x037d, B:52:0x0383, B:28:0x02c3, B:30:0x02de, B:31:0x02f3, B:33:0x030c, B:35:0x0329, B:37:0x0340, B:40:0x0349, B:42:0x034f, B:43:0x0353, B:47:0x0362, B:48:0x0366, B:44:0x0356, B:46:0x035c, B:10:0x021e, B:12:0x022c, B:14:0x0237, B:15:0x0244), top: B:105:0x0105 }] */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0462 A[Catch: Exception -> 0x05da, TryCatch #1 {Exception -> 0x05da, blocks: (B:3:0x0105, B:6:0x01ff, B:8:0x0208, B:9:0x0212, B:16:0x0246, B:18:0x0252, B:53:0x0391, B:55:0x03aa, B:57:0x03d3, B:60:0x03f0, B:62:0x03fa, B:67:0x0417, B:71:0x045a, B:73:0x0462, B:77:0x046d, B:79:0x0488, B:80:0x04a3, B:82:0x0504, B:84:0x0565, B:86:0x057e, B:91:0x059b, B:93:0x05b6, B:95:0x05d3, B:70:0x0434, B:22:0x0270, B:24:0x029c, B:25:0x029e, B:27:0x02ac, B:50:0x037d, B:52:0x0383, B:28:0x02c3, B:30:0x02de, B:31:0x02f3, B:33:0x030c, B:35:0x0329, B:37:0x0340, B:40:0x0349, B:42:0x034f, B:43:0x0353, B:47:0x0362, B:48:0x0366, B:44:0x0356, B:46:0x035c, B:10:0x021e, B:12:0x022c, B:14:0x0237, B:15:0x0244), top: B:105:0x0105 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0488 A[Catch: Exception -> 0x05da, TryCatch #1 {Exception -> 0x05da, blocks: (B:3:0x0105, B:6:0x01ff, B:8:0x0208, B:9:0x0212, B:16:0x0246, B:18:0x0252, B:53:0x0391, B:55:0x03aa, B:57:0x03d3, B:60:0x03f0, B:62:0x03fa, B:67:0x0417, B:71:0x045a, B:73:0x0462, B:77:0x046d, B:79:0x0488, B:80:0x04a3, B:82:0x0504, B:84:0x0565, B:86:0x057e, B:91:0x059b, B:93:0x05b6, B:95:0x05d3, B:70:0x0434, B:22:0x0270, B:24:0x029c, B:25:0x029e, B:27:0x02ac, B:50:0x037d, B:52:0x0383, B:28:0x02c3, B:30:0x02de, B:31:0x02f3, B:33:0x030c, B:35:0x0329, B:37:0x0340, B:40:0x0349, B:42:0x034f, B:43:0x0353, B:47:0x0362, B:48:0x0366, B:44:0x0356, B:46:0x035c, B:10:0x021e, B:12:0x022c, B:14:0x0237, B:15:0x0244), top: B:105:0x0105 }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0504 A[Catch: Exception -> 0x05da, TryCatch #1 {Exception -> 0x05da, blocks: (B:3:0x0105, B:6:0x01ff, B:8:0x0208, B:9:0x0212, B:16:0x0246, B:18:0x0252, B:53:0x0391, B:55:0x03aa, B:57:0x03d3, B:60:0x03f0, B:62:0x03fa, B:67:0x0417, B:71:0x045a, B:73:0x0462, B:77:0x046d, B:79:0x0488, B:80:0x04a3, B:82:0x0504, B:84:0x0565, B:86:0x057e, B:91:0x059b, B:93:0x05b6, B:95:0x05d3, B:70:0x0434, B:22:0x0270, B:24:0x029c, B:25:0x029e, B:27:0x02ac, B:50:0x037d, B:52:0x0383, B:28:0x02c3, B:30:0x02de, B:31:0x02f3, B:33:0x030c, B:35:0x0329, B:37:0x0340, B:40:0x0349, B:42:0x034f, B:43:0x0353, B:47:0x0362, B:48:0x0366, B:44:0x0356, B:46:0x035c, B:10:0x021e, B:12:0x022c, B:14:0x0237, B:15:0x0244), top: B:105:0x0105 }] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x05b6 A[Catch: Exception -> 0x05da, TryCatch #1 {Exception -> 0x05da, blocks: (B:3:0x0105, B:6:0x01ff, B:8:0x0208, B:9:0x0212, B:16:0x0246, B:18:0x0252, B:53:0x0391, B:55:0x03aa, B:57:0x03d3, B:60:0x03f0, B:62:0x03fa, B:67:0x0417, B:71:0x045a, B:73:0x0462, B:77:0x046d, B:79:0x0488, B:80:0x04a3, B:82:0x0504, B:84:0x0565, B:86:0x057e, B:91:0x059b, B:93:0x05b6, B:95:0x05d3, B:70:0x0434, B:22:0x0270, B:24:0x029c, B:25:0x029e, B:27:0x02ac, B:50:0x037d, B:52:0x0383, B:28:0x02c3, B:30:0x02de, B:31:0x02f3, B:33:0x030c, B:35:0x0329, B:37:0x0340, B:40:0x0349, B:42:0x034f, B:43:0x0353, B:47:0x0362, B:48:0x0366, B:44:0x0356, B:46:0x035c, B:10:0x021e, B:12:0x022c, B:14:0x0237, B:15:0x0244), top: B:105:0x0105 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private void M() {
        /*
            Method dump skipped, instructions count: 1528
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.M():void");
    }

    private String N(String str) {
        String m1267 = C0250.m1267(f36short, 702, 4, 1544);
        return str.indexOf(m1267) >= 0 ? str.replace(m1267, C0252.m1274(f36short, 706, 1, 2693)) : str;
    }

    private String O(String str, String str2, String str3) {
        String str4 = str2;
        try {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                spiderApi.log(C0243.m1246(f36short, 707, 21, 3007) + str);
            }
            String j = j(str);
            SpiderApi spiderApi2 = this.I;
            if (spiderApi2 != null) {
                if (j == null) {
                    spiderApi2.log(C0242.m1245(f36short, 728, 8, 1290));
                    j = "";
                } else {
                    boolean z = this.m;
                    String m1257 = C0246.m1257(f36short, 736, 11, 1790);
                    spiderApi2.log(z ? m1257 + j : m1257 + j.split(C0243.m1246(f36short, 747, 10, 2403))[0].split(C0238.m1232(f36short, 757, 3, 901))[0] + C0251.m1271(f36short, 760, 6, 499));
                }
            }
            if (str4.length() <= 0) {
                str4 = C0241.m1242(f36short, 766, 11, 2455);
            }
            String m1258 = C0247.m1258(f36short, 777, 2, 945);
            if (j != null && j.startsWith(C0241.m1242(f36short, 779, 1, 723)) && j.endsWith(C0248.m1262(f36short, 780, 1, 3111)) && str4.indexOf(m1258) < 0) {
                JSONObject jSONObject = new JSONObject(j);
                if (str4.indexOf(C0248.m1262(f36short, 781, 1, 456)) < 0) {
                    jSONObject.optString(str4).getClass();
                } else {
                    u(j, str4);
                }
            } else if (j != null && str4.indexOf(m1258) >= 0) {
                ArrayList<String> Y = Y(j, str3, "");
                for (int i = 0; i < Y.size(); i++) {
                    String str5 = Y.get(i);
                    if (str5.length() > 10) {
                        ArrayList<String> Y2 = Y(str5, str4, "");
                        for (int i2 = 0; i2 < Y2.size(); i2++) {
                            String trim = Y2.get(i2).trim();
                            try {
                                if (this.s.indexOf(C0244.m1250(f36short, 782, 2, 498)) < 0) {
                                    trim = URLDecoder.decode(trim);
                                }
                            } catch (Exception e) {
                                if (this.m) {
                                    Init.show(this.G + C0250.m1267(f36short, 784, 14, 2563) + e.toString());
                                }
                                SpiderApi spiderApi3 = this.I;
                                if (spiderApi3 != null) {
                                    spiderApi3.log(C0246.m1257(f36short, 798, 13, 1584) + e.toString());
                                }
                            }
                            if (trim.length() > 10) {
                                return trim;
                            }
                        }
                        continue;
                    }
                }
            }
            return str;
        } catch (Exception e2) {
            if (this.m) {
                Init.show(this.G + C0244.m1250(f36short, 811, 14, 1856) + e2.toString());
            }
            SpiderApi spiderApi4 = this.I;
            if (spiderApi4 != null) {
                b.a(e2, d.b(C0247.m1258(f36short, 825, 15, 3026)), spiderApi4);
            }
            return str;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:109:0x0543  */
    /* JADX WARN: Removed duplicated region for block: B:122:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x02c1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.lang.String P(java.lang.String r63, java.lang.String r64) {
        /*
            Method dump skipped, instructions count: 1372
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.P(java.lang.String, java.lang.String):java.lang.String");
    }

    private String Q(String str) {
        String str2 = str;
        String m1267 = C0250.m1267(f36short, 1088, 5, 687);
        if (str2.indexOf(m1267) >= 0) {
            str2 = str2.replace(m1267, C0250.m1267(f36short, 1093, 1, 1809));
        }
        String m1257 = C0246.m1257(f36short, 1094, 5, 2717);
        return str2.indexOf(m1257) >= 0 ? str2.replace(m1257, C0244.m1250(f36short, 1099, 1, 2098)) : str2;
    }

    private String R(String str, String str2) {
        String str3 = str2;
        if (str3.equals(C0250.m1267(f36short, 1100, 1, 1678)) || str3.isEmpty()) {
            str3 = str;
        }
        String m1242 = C0241.m1242(f36short, 1101, 2, 2613);
        String[] split = str.split(m1242);
        String[] split2 = str3.split(m1242);
        int i = 0;
        String str4 = "";
        while (i < split.length) {
            String m1257 = i < split.length + (-1) ? C0246.m1257(f36short, 1103, 1, 446) : "";
            StringBuilder b = d.b(str4);
            b.append(split[i]);
            b.append(C0241.m1242(f36short, 1104, 1, 2923));
            str4 = n.b(b, split2[i], m1257);
            i++;
        }
        return str4;
    }

    private String S(String str, String str2) {
        String str3;
        String m1267;
        String str4;
        if (str.length() > 1) {
            String[] split = str.split(C0251.m1271(f36short, 1105, 1, 1978));
            if (split.length == 1) {
                str3 = split[0].replaceAll(C0247.m1258(f36short, 1106, 10, 1001), C0249.m1265(f36short, 1116, 2, 664));
            } else if (split.length > 1) {
                int length = split.length;
                int i = 0;
                while (true) {
                    m1267 = C0250.m1267(f36short, 1118, 2, 3003);
                    if (i >= length) {
                        str4 = "";
                        break;
                    }
                    String str5 = split[i];
                    if (str2.equals(str5.split(m1267)[0])) {
                        str4 = str5.split(m1267)[1];
                        break;
                    }
                    i++;
                }
                str3 = str4.length() < 1 ? split[0].split(m1267)[1] : str4;
            } else {
                str3 = "";
            }
            return (str3 == null || !str3.startsWith(C0249.m1265(f36short, 1120, 4, 2795))) ? "" : str3;
        }
        return "";
    }

    private void T(Map<String, List<String>> map) {
        String[] split;
        if (map.isEmpty()) {
            return;
        }
        SpiderApi spiderApi = this.I;
        if (spiderApi != null) {
            StringBuilder b = d.b(C0240.m1237(f36short, 1124, 6, 632));
            b.append(map.toString());
            spiderApi.log(b.toString());
        }
        StringBuilder sb = new StringBuilder();
        String m1265 = C0249.m1265(f36short, 1130, 10, 2007);
        List<String> list = map.get(m1265);
        String m1274 = C0252.m1274(f36short, 1140, 1, 1096);
        if (list != null && !map.get(m1265).isEmpty()) {
            for (String str : map.get(m1265)) {
                sb.append(str.split(m1274)[0]);
                sb.append(m1274);
            }
        }
        String m1257 = C0246.m1257(f36short, 1141, 10, 2120);
        if (map.get(m1257) != null && !map.get(m1257).isEmpty()) {
            for (String str2 : map.get(m1257)) {
                if (sb.indexOf(str2.split(m1274)[0]) < 0) {
                    sb.append(str2.split(m1274)[0]);
                    sb.append(m1274);
                }
            }
        }
        String m1242 = C0241.m1242(f36short, 1151, 10, 1867);
        if (map.get(m1242) != null && !map.get(m1242).isEmpty()) {
            for (String str3 : map.get(m1242)) {
                if (sb.indexOf(str3.split(m1274)[0]) < 0) {
                    sb.append(str3.split(m1274)[0]);
                    sb.append(m1274);
                }
            }
        }
        String m1232 = C0238.m1232(f36short, 1161, 10, 1786);
        if (map.get(m1232) != null && !map.get(m1232).isEmpty()) {
            for (String str4 : map.get(m1232)) {
                if (sb.indexOf(str4.split(m1274)[0]) < 0) {
                    sb.append(str4.split(m1274)[0]);
                    sb.append(m1274);
                }
            }
        }
        if (sb.toString().length() < 3) {
            return;
        }
        for (String str5 : sb.toString().split(m1274)) {
            String str6 = this.z;
            String m1267 = C0250.m1267(f36short, 1171, 1, 3273);
            int indexOf = str6.indexOf(str5.split(m1267)[0]);
            String m1237 = C0240.m1237(f36short, 1172, 1, 2876);
            if (indexOf >= 0) {
                if (!str5.endsWith(m1267) && !m1237.equals(str5.split(m1267)[1])) {
                    String replaceAll = n.b(new StringBuilder(), this.z, m1274).replaceAll(n.b(new StringBuilder(), str5.split(m1267)[0], C0249.m1265(f36short, 1173, 5, 605)), str5 + m1274);
                    this.z = replaceAll;
                    str5 = replaceAll.substring(0, replaceAll.length() - 1);
                }
            } else if (this.z.length() >= 1 && !m1237.equals(this.z)) {
                str5 = this.z + m1274 + str5;
            }
            this.z = str5;
        }
    }

    private static String V(String str) {
        String str2 = str;
        if (str2.length() < 1) {
            return str2;
        }
        Matcher matcher = Pattern.compile(C0248.m1262(f36short, 1178, 12, 747)).matcher(str2);
        while (matcher.find()) {
            String group = matcher.group(1);
            str2 = str2.replace(group, ((char) Integer.parseInt(matcher.group(2), 16)) + "");
        }
        return str2.replaceAll(C0244.m1250(f36short, 1190, 2, 3008), "");
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:997:0x180b
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    private org.json.JSONObject W(java.lang.String r70, java.lang.String r71, boolean r72) {
        /*
            Method dump skipped, instructions count: 6782
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.W(java.lang.String, java.lang.String, boolean):org.json.JSONObject");
    }

    private void X(String str) {
        String m1267 = C0250.m1267(f36short, 1192, 2, 1179);
        if (B(m1267).length() > 0) {
            p.l = L(Y(str, B(m1267), "").get(0));
        }
        String m12672 = C0250.m1267(f36short, 1194, 2, 2158);
        if (B(m12672).length() > 0) {
            p.m = L(Y(str, B(m12672), "").get(0));
        }
        String m12673 = C0250.m1267(f36short, 1196, 2, 886);
        String m1232 = C0238.m1232(f36short, 1198, 2, 1344);
        if (D(m12673, m1232, "").length() > 0) {
            p.n = L(Y(str, D(m12673, m1232, ""), "").get(0));
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:34:0x013c  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0199 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.util.ArrayList<java.lang.String> Y(java.lang.String r60, java.lang.String r61, java.lang.String r62) {
        /*
            Method dump skipped, instructions count: 421
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.Y(java.lang.String, java.lang.String, java.lang.String):java.util.ArrayList");
    }

    /* JADX WARN: Removed duplicated region for block: B:157:0x065f A[Catch: all -> 0x07c1, TRY_ENTER, TryCatch #0 {all -> 0x07c1, blocks: (B:11:0x00ea, B:13:0x00f0, B:14:0x0105, B:16:0x010b, B:17:0x0120, B:19:0x0126, B:20:0x013b, B:23:0x0164, B:25:0x016a, B:27:0x0170, B:29:0x0176, B:31:0x017c, B:32:0x0180, B:34:0x0184, B:36:0x018a, B:38:0x0196, B:39:0x0198, B:41:0x019e, B:42:0x01b3, B:44:0x01b9, B:45:0x01ce, B:47:0x01d4, B:48:0x01e9, B:51:0x0211, B:52:0x0226, B:54:0x023d, B:55:0x0263, B:58:0x028c, B:60:0x0292, B:63:0x029b, B:66:0x02b3, B:68:0x02b9, B:72:0x0316, B:69:0x02f6, B:71:0x02fc, B:73:0x031a, B:75:0x0326, B:76:0x0344, B:90:0x0377, B:92:0x037d, B:93:0x0392, B:95:0x0398, B:96:0x03ad, B:99:0x03c4, B:101:0x03f0, B:103:0x03f6, B:104:0x0420, B:107:0x0448, B:109:0x045f, B:111:0x0465, B:113:0x0479, B:115:0x047f, B:117:0x0492, B:119:0x049c, B:120:0x04a0, B:116:0x048e, B:112:0x0473, B:122:0x04a4, B:124:0x04cb, B:138:0x0586, B:139:0x05b6, B:141:0x05bc, B:144:0x060d, B:146:0x062c, B:148:0x0634, B:157:0x065f, B:159:0x0676, B:161:0x0695, B:163:0x069d, B:166:0x06af, B:170:0x06be, B:172:0x06d5, B:174:0x06f0, B:176:0x06f9, B:178:0x0703, B:179:0x0713, B:183:0x0723, B:187:0x0732, B:184:0x0728, B:191:0x0745, B:192:0x0749, B:194:0x0760, B:196:0x077b, B:198:0x0784, B:200:0x078c, B:201:0x0798, B:205:0x07a4, B:210:0x07b0, B:207:0x07a8, B:214:0x07b7, B:169:0x06b5, B:125:0x04d2, B:127:0x04e9, B:128:0x04f8, B:130:0x04fb, B:131:0x052b, B:132:0x052d, B:133:0x054d, B:135:0x0550, B:136:0x0580, B:77:0x034b, B:79:0x034f, B:81:0x0355, B:83:0x035b, B:86:0x0364, B:87:0x0371), top: B:229:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:192:0x0749 A[Catch: all -> 0x07c1, TryCatch #0 {all -> 0x07c1, blocks: (B:11:0x00ea, B:13:0x00f0, B:14:0x0105, B:16:0x010b, B:17:0x0120, B:19:0x0126, B:20:0x013b, B:23:0x0164, B:25:0x016a, B:27:0x0170, B:29:0x0176, B:31:0x017c, B:32:0x0180, B:34:0x0184, B:36:0x018a, B:38:0x0196, B:39:0x0198, B:41:0x019e, B:42:0x01b3, B:44:0x01b9, B:45:0x01ce, B:47:0x01d4, B:48:0x01e9, B:51:0x0211, B:52:0x0226, B:54:0x023d, B:55:0x0263, B:58:0x028c, B:60:0x0292, B:63:0x029b, B:66:0x02b3, B:68:0x02b9, B:72:0x0316, B:69:0x02f6, B:71:0x02fc, B:73:0x031a, B:75:0x0326, B:76:0x0344, B:90:0x0377, B:92:0x037d, B:93:0x0392, B:95:0x0398, B:96:0x03ad, B:99:0x03c4, B:101:0x03f0, B:103:0x03f6, B:104:0x0420, B:107:0x0448, B:109:0x045f, B:111:0x0465, B:113:0x0479, B:115:0x047f, B:117:0x0492, B:119:0x049c, B:120:0x04a0, B:116:0x048e, B:112:0x0473, B:122:0x04a4, B:124:0x04cb, B:138:0x0586, B:139:0x05b6, B:141:0x05bc, B:144:0x060d, B:146:0x062c, B:148:0x0634, B:157:0x065f, B:159:0x0676, B:161:0x0695, B:163:0x069d, B:166:0x06af, B:170:0x06be, B:172:0x06d5, B:174:0x06f0, B:176:0x06f9, B:178:0x0703, B:179:0x0713, B:183:0x0723, B:187:0x0732, B:184:0x0728, B:191:0x0745, B:192:0x0749, B:194:0x0760, B:196:0x077b, B:198:0x0784, B:200:0x078c, B:201:0x0798, B:205:0x07a4, B:210:0x07b0, B:207:0x07a8, B:214:0x07b7, B:169:0x06b5, B:125:0x04d2, B:127:0x04e9, B:128:0x04f8, B:130:0x04fb, B:131:0x052b, B:132:0x052d, B:133:0x054d, B:135:0x0550, B:136:0x0580, B:77:0x034b, B:79:0x034f, B:81:0x0355, B:83:0x035b, B:86:0x0364, B:87:0x0371), top: B:229:0x00ea }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.util.ArrayList<java.lang.String> Z(java.lang.String r70, java.lang.String r71, java.lang.String r72) {
        /*
            Method dump skipped, instructions count: 2087
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.Z(java.lang.String, java.lang.String, java.lang.String):java.util.ArrayList");
    }

    private String a0(String str, String str2) {
        String str3;
        String str4;
        String i;
        StringBuilder sb;
        String m1265 = C0249.m1265(f36short, 1546, 2, 1036);
        String m1271 = C0251.m1271(f36short, 1548, 2, 3074);
        String m1250 = C0244.m1250(f36short, 1550, 2, 3267);
        String m1257 = C0246.m1257(f36short, 1552, 2, 1547);
        String m1267 = C0250.m1267(f36short, 1554, 1, 1101);
        String m12672 = C0250.m1267(f36short, 1555, 3, 2540);
        try {
            String replaceAll = str2.replaceAll(C0240.m1237(f36short, 1558, 10, 1884), m1257);
            String replaceAll2 = str2.replaceAll(C0242.m1245(f36short, 1568, 6, 2150), "");
            if (str.indexOf(C0240.m1237(f36short, 1574, 2, 2006)) >= 0) {
                String replaceAll3 = str.replaceAll(C0251.m1271(f36short, 1576, 21, 1232), m1257);
                char c = 0;
                if (replaceAll3.indexOf(m1250) >= 0) {
                    return Y(replaceAll2, replaceAll3.replace(m1250, C0248.m1262(f36short, 1597, 2, 2246)), "").get(0).trim();
                }
                String replace = Q(replaceAll3).replace(C0250.m1267(f36short, 1599, 4, 1388), replaceAll);
                if (!replace.isEmpty()) {
                    String[] split = replace.split(C0241.m1242(f36short, 1603, 1, 1601));
                    int length = split.length;
                    int i2 = 0;
                    while (i2 < length) {
                        String N = N(split[i2]);
                        if (N.indexOf(m12672) < 0) {
                            str3 = N.split(m1271)[c];
                            str4 = N.split(m1271)[1];
                        } else {
                            str3 = N.split(m12672)[c] + C0245.m1252(f36short, 1604, 1, 1930);
                            str4 = N.split(m12672)[1];
                        }
                        String f0 = f0(str4);
                        int indexOf = str3.indexOf(m1267);
                        String m1246 = C0243.m1246(f36short, 1605, 1, 2225);
                        if (indexOf >= 0 && f0.length() > 0) {
                            if (f0.equals(m1246)) {
                                f0 = "";
                            }
                            boolean startsWith = str3.startsWith(m1267);
                            String m1262 = C0248.m1262(f36short, 1606, 10, 3170);
                            if (startsWith) {
                                String e0 = e0(str3.substring(1, str3.length()));
                                sb = new StringBuilder();
                                sb.append(m1262);
                                sb.append(i(e0));
                            } else if (str3.endsWith(m1267)) {
                                String e02 = e0(str3.substring(0, str3.length() - 1));
                                sb = new StringBuilder();
                                sb.append(i(e02));
                                sb.append(m1262);
                            } else {
                                String e03 = e0(str3.split(m1265)[0]);
                                String e04 = e0(str3.split(m1265)[1]);
                                i = i(e03) + m1262 + i(e04);
                            }
                            i = sb.toString();
                        } else if (f0.length() <= 0) {
                            continue;
                            i2++;
                            c = 0;
                        } else if (str3.equals(m1246)) {
                            return f0;
                        } else {
                            if (f0.equals(m1246)) {
                                f0 = "";
                            }
                            i = i(e0(str3));
                        }
                        replaceAll2 = replaceAll2.replaceAll(i, f0);
                        i2++;
                        c = 0;
                    }
                }
            }
            return replaceAll2;
        } catch (Exception e) {
            if (this.m) {
                Init.show(this.G + C0243.m1246(f36short, 1616, 13, 340) + str + C0243.m1246(f36short, 1629, 2, 1744) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0248.m1262(f36short, 1631, 12, 2609)), spiderApi);
            }
            return str2;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:40:0x01d7, code lost:
        if (r5.indexOf(r46) <= 0) goto L27;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x022d, code lost:
        if (r5.indexOf(r46) <= 0) goto L27;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.util.ArrayList<java.lang.String> b0(java.lang.String r68, java.lang.String r69, java.lang.String r70) {
        /*
            Method dump skipped, instructions count: 583
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.b0(java.lang.String, java.lang.String, java.lang.String):java.util.ArrayList");
    }

    /* JADX WARN: Code restructure failed: missing block: B:32:0x0169, code lost:
        if (r4.indexOf(r24) <= 0) goto L28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x017a, code lost:
        if (r4.indexOf(r24) <= 0) goto L28;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.util.ArrayList<java.lang.String> c0(java.lang.String r62, java.lang.String r63, java.lang.String r64) {
        /*
            Method dump skipped, instructions count: 403
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.c0(java.lang.String, java.lang.String, java.lang.String):java.util.ArrayList");
    }

    private JSONObject e(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        String m1232 = C0238.m1232(f36short, 1829, 1, 538);
        String m1252 = C0245.m1252(f36short, 1830, 2, 1821);
        String m1242 = C0241.m1242(f36short, 1832, 1, 1673);
        try {
            this.x = "";
            JSONObject x = x(str, str2, z, hashMap);
            JSONArray jSONArray = new JSONArray();
            String m1237 = C0240.m1237(f36short, 1833, 4, 2277);
            if (x != null) {
                jSONArray = x.getJSONArray(m1237);
            }
            int length = jSONArray.length();
            String m1267 = C0250.m1267(f36short, 1837, 8, 2242);
            String m1258 = C0247.m1258(f36short, 1845, 2, 2683);
            if (length < 1 && this.w.length() < 1) {
                if (m1258.equals(this.r) && this.s.indexOf(m1252) >= 0) {
                    this.s = this.s.replace(m1252, "");
                }
                if (this.s.indexOf(m1242) < 0) {
                    this.s += m1242;
                }
                SpiderApi spiderApi = this.I;
                if (spiderApi != null) {
                    spiderApi.log(C0241.m1242(f36short, 1847, 26, 2078));
                }
                this.w = m1267;
                x = x(str, str2, z, hashMap);
            }
            if (x != null) {
                jSONArray = x.getJSONArray(m1237);
            }
            if (jSONArray.length() < 1 && m1267.equals(this.w)) {
                SpiderApi spiderApi2 = this.I;
                if (spiderApi2 != null) {
                    spiderApi2.log(C0245.m1252(f36short, 1873, 27, 2350));
                }
                this.w = C0246.m1257(f36short, 1900, 12, 462);
                x = x(str, str2, z, hashMap);
                if (m1258.equals(this.r)) {
                    this.w = "";
                }
            }
            final String B = B(C0248.m1262(f36short, 1912, 3, 2040));
            if ((B.length() < 1 && this.s.indexOf(C0246.m1257(f36short, 1915, 1, 2593)) >= 0) || C0250.m1267(f36short, 1916, 1, 2969).equals(B)) {
                B = this.f;
            }
            final String n = n(B);
            if (!m1258.equals(this.r) && B.startsWith(C0241.m1242(f36short, 1917, 4, 2191)) && !m1232.equals(this.A)) {
                try {
                    Init.run(new Runnable() { // from class: com.github.catvod.spider.Ai

                        /* renamed from: short  reason: not valid java name */
                        private static final short[] f8short = {21716, 31295, 31232, -25308, 26654, -29543, 21305};

                        @Override // java.lang.Runnable
                        public final void run() {
                            final XBPQ xbpq = XBPQ.this;
                            String str3 = B;
                            String str4 = n;
                            String str5 = XBPQ.K;
                            xbpq.getClass();
                            k.A(C0244.m1250(f8short, 0, 7, 1361), str3, str4, new j() { // from class: com.github.catvod.spider.XBPQ.1

                                /* renamed from: short  reason: not valid java name */
                                private static final short[] f37short = {649, 649, 649, 1851, 1859, 1851, 1859, 1851, 1859, 812, 2427, 2385, 2373, 2954};

                                @Override // com.github.catvod.spider.merge.h1.j.j
                                public void vertifyCode(String str6) {
                                    if (str6.indexOf(C0248.m1262(f37short, 0, 3, 685)) > 1) {
                                        String[] split = str6.split(C0240.m1237(f37short, 3, 6, 1895));
                                        String str7 = split[0];
                                        String m1271 = C0251.m1271(f37short, 9, 1, 783);
                                        XBPQ.K = str7.split(m1271)[0];
                                        XBPQ.this.z = split[0].split(m1271)[1];
                                        SharedPreferences.Editor edit = Init.d.edit();
                                        edit.putString(n.b(new StringBuilder(), XBPQ.this.G, C0241.m1242(f37short, 10, 3, 2340)), split[0].split(m1271)[0]);
                                        edit.putString(XBPQ.this.G, split[0].split(m1271)[1]);
                                        edit.apply();
                                    }
                                    XBPQ.this.A = C0240.m1237(f37short, 13, 1, 3002);
                                }
                            });
                        }
                    }, 200);
                    if (!m1232.equals(this.A)) {
                        this.A = "";
                    }
                } catch (Exception e) {
                    if (this.m) {
                        Init.show(this.G + C0247.m1258(f36short, 1921, 14, 3222) + e.toString());
                    }
                    SpiderApi spiderApi3 = this.I;
                    if (spiderApi3 != null) {
                        spiderApi3.log(C0240.m1237(f36short, 1935, 15, 2550) + e.toString());
                    }
                }
            }
            this.x = "";
            return x;
        } catch (JSONException e2) {
            if (this.m) {
                Init.show(this.G + C0242.m1245(f36short, 1950, 15, 2174) + e2.toString());
            }
            SpiderApi spiderApi4 = this.I;
            if (spiderApi4 != null) {
                StringBuilder b = d.b(C0252.m1274(f36short, 1965, 16, 1613));
                b.append(e2.toString());
                spiderApi4.log(b.toString());
            }
            this.x = "";
            return null;
        }
    }

    private String e0(String str) {
        String m1232 = C0238.m1232(f36short, 1981, 4, 1711);
        return str.indexOf(m1232) >= 0 ? str.replace(m1232, C0241.m1242(f36short, 1985, 1, 2048)) : str;
    }

    private String f0(String str) {
        String m1267 = C0250.m1267(f36short, 1986, 2, 1180);
        try {
            if (str.length() < 0) {
                return "";
            }
            if (str.indexOf(C0248.m1262(f36short, 1988, 1, 1048)) < 0) {
                return e0(str);
            }
            Matcher matcher = Pattern.compile(i(e0(str.split(m1267)[0])) + C0241.m1242(f36short, 1989, 10, 333) + i(e0(str.split(m1267)[1]))).matcher(this.x);
            if (matcher.find()) {
                return matcher.group(1).replaceAll(C0243.m1246(f36short, 1999, 22, 1033), "").replaceAll(C0247.m1258(f36short, 2021, 7, 340), "").replaceAll(C0243.m1246(f36short, 2028, 4, 1788), "").trim();
            }
            if (this.m) {
                Init.show(C0242.m1245(f36short, 2032, 12, 2418));
            }
            return "";
        } catch (Exception e) {
            if (this.m) {
                Init.show(this.G + C0243.m1246(f36short, 2044, 11, 2459) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0243.m1246(f36short, 2055, 20, 1105)), spiderApi);
            }
            return "";
        }
    }

    private String fixCover(String str, String str2) {
        try {
            return C0243.m1246(f36short, 2075, 21, 2733) + str2 + C0241.m1242(f36short, 2096, 5, 626) + str + C0238.m1232(f36short, 2101, 11, 493) + B(C0240.m1237(f36short, 2112, 4, 1619));
        } catch (Exception e) {
            if (this.m) {
                Init.show(this.G + C0243.m1246(f36short, 2116, 15, 900) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0249.m1265(f36short, 2131, 15, 743)), spiderApi);
            }
            return str;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:14:0x00eb A[Catch: Exception -> 0x02bf, TRY_ENTER, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x00f0 A[Catch: Exception -> 0x02bf, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x014b A[Catch: Exception -> 0x02bf, TRY_ENTER, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:23:0x0150 A[Catch: Exception -> 0x02bf, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0189 A[Catch: Exception -> 0x02bf, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x01fc  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0215 A[Catch: Exception -> 0x02bf, TRY_ENTER, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x021a A[Catch: Exception -> 0x02bf, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0286 A[Catch: Exception -> 0x02bf, TRY_ENTER, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x028b A[Catch: Exception -> 0x02bf, TryCatch #0 {Exception -> 0x02bf, blocks: (B:3:0x004b, B:6:0x008b, B:10:0x00c0, B:11:0x00c3, B:14:0x00eb, B:18:0x0120, B:19:0x0123, B:22:0x014b, B:26:0x0180, B:27:0x0183, B:29:0x0189, B:31:0x01a0, B:34:0x01bd, B:37:0x01c6, B:39:0x01d8, B:38:0x01ce, B:40:0x01db, B:42:0x01e1, B:46:0x01fe, B:49:0x0215, B:53:0x025b, B:54:0x025e, B:57:0x0286, B:61:0x02bb, B:58:0x028b, B:60:0x0291, B:50:0x021a, B:52:0x0220, B:23:0x0150, B:25:0x0156, B:15:0x00f0, B:17:0x00f6, B:7:0x0090, B:9:0x0096), top: B:72:0x004b }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private org.json.JSONArray g(java.lang.String r69, java.lang.String r70, java.lang.String r71, java.lang.String r72, java.lang.String r73) {
        /*
            Method dump skipped, instructions count: 782
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.g(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):org.json.JSONArray");
    }

    private String h(String str) {
        String str2;
        String[] split;
        a aVar = new a() { // from class: com.github.catvod.spider.XBPQ.3
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.github.catvod.spider.merge.h1.k.c
            public final void onFailure(Call call, Exception exc) {
            }

            @Override // com.github.catvod.spider.merge.h1.k.c
            protected final /* bridge */ /* synthetic */ void onResponse(Response response) {
            }
        };
        String str3 = this.s;
        String trim = str.indexOf(C0248.m1262(f36short, 2274, 5, 1945)) > 0 ? str.split(C0246.m1257(f36short, 2279, 6, 846))[1].trim() : "";
        String str4 = str.split(C0252.m1274(f36short, 2285, 1, 2804))[0];
        if (this.s.indexOf(C0241.m1242(f36short, 2286, 1, 2937)) < 0 || str4.indexOf(C0241.m1242(f36short, 2287, 9, 2489)) >= 0 || str4.indexOf(C0247.m1258(f36short, 2296, 9, 2482)) >= 0 || this.I == null) {
            str2 = str4;
        } else {
            str2 = this.I.getAddress(true) + C0241.m1242(f36short, 2390, 9, 2053) + str4 + C0241.m1242(f36short, 2399, 6, 2193) + (str3.matches(C0246.m1257(f36short, 2366, 10, 3134)) ? str3.replaceAll(C0249.m1265(f36short, 2376, 12, 2227), C0251.m1271(f36short, 2388, 2, 1671)) : "") + (this.s.indexOf(C0238.m1232(f36short, 2305, 2, 1360)) >= 0 ? C0251.m1271(f36short, 2307, 24, 1397) : C0244.m1250(f36short, 2331, 35, 469));
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                spiderApi.log(C0242.m1245(f36short, 2405, 10, 2650) + str2);
            }
        }
        HashMap<String, String> r = !C0243.m1246(f36short, 2415, 2, 2371).equals(this.r) ? r(str4) : I(str4);
        if (trim.length() > 2) {
            LinkedHashMap linkedHashMap = new LinkedHashMap();
            for (String str5 : trim.split(C0248.m1262(f36short, 2417, 2, 2596))) {
                String m1265 = C0249.m1265(f36short, 2419, 1, 2082);
                if (!str5.endsWith(m1265)) {
                    int indexOf = str5.indexOf(m1265);
                    linkedHashMap.put(str5.substring(0, indexOf), str5.substring(indexOf + 1));
                }
            }
            if (trim.isEmpty()) {
                g.e(g.b(), str2, null, r, aVar);
            } else {
                g.e(g.b(), str2, linkedHashMap, r, aVar);
            }
        } else {
            g.c(g.b(), str2, r, aVar);
        }
        try {
            byte[] bytes = aVar.getResult().body().bytes();
            return bytes != null ? new String(bytes, this.s.indexOf(C0238.m1232(f36short, 2420, 1, 1354)) >= 0 ? C0241.m1242(f36short, 2421, 3, 1239) : E(C0252.m1274(f36short, 2424, 2, 3009), C0247.m1258(f36short, 2426, 6, 2151), C0238.m1232(f36short, 2432, 13, 1568), C0245.m1252(f36short, 2445, 5, 861))) : "";
        } catch (IOException e) {
            if (this.m) {
                Init.show(this.G + C0246.m1257(f36short, 2450, 15, 433) + e.toString());
            }
            SpiderApi spiderApi2 = this.I;
            if (spiderApi2 != null) {
                StringBuilder b = d.b(C0248.m1262(f36short, 2465, 15, 1428));
                b.append(e.toString());
                spiderApi2.log(b.toString());
            }
            return "";
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:185:0x089e  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x089f A[Catch: Exception -> 0x08b3, TRY_LEAVE, TryCatch #2 {Exception -> 0x08b3, blocks: (B:78:0x0467, B:80:0x0476, B:81:0x0499, B:83:0x04a1, B:85:0x04a7, B:87:0x04b1, B:89:0x04b9, B:182:0x0881, B:91:0x04bf, B:93:0x04d8, B:95:0x04ef, B:97:0x0506, B:100:0x0527, B:103:0x055a, B:106:0x05a9, B:108:0x05c4, B:114:0x05ef, B:110:0x05df, B:112:0x05e7, B:115:0x05fd, B:117:0x0605, B:120:0x060f, B:122:0x0615, B:123:0x061b, B:125:0x0622, B:127:0x062a, B:129:0x0641, B:131:0x0658, B:133:0x066f, B:136:0x0688, B:138:0x069f, B:141:0x06c9, B:179:0x0868, B:143:0x06e0, B:145:0x06f7, B:146:0x071e, B:148:0x0735, B:149:0x0740, B:151:0x0757, B:152:0x0762, B:154:0x0779, B:155:0x0784, B:157:0x079b, B:158:0x07a6, B:160:0x07bd, B:161:0x07c8, B:163:0x07df, B:164:0x07ea, B:166:0x07f0, B:167:0x07fe, B:169:0x083f, B:170:0x0848, B:172:0x084f, B:174:0x0857, B:176:0x085d, B:183:0x0891, B:186:0x089f), top: B:211:0x0467 }] */
    /* JADX WARN: Removed duplicated region for block: B:196:0x08bf  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x08ef  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x0891 A[EDGE_INSN: B:214:0x0891->B:183:0x0891 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x03e8  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x03ea A[Catch: Exception -> 0x08b5, TryCatch #1 {Exception -> 0x08b5, blocks: (B:15:0x01ad, B:17:0x01b7, B:19:0x01c5, B:21:0x01d5, B:25:0x01dd, B:26:0x01eb, B:28:0x01f1, B:38:0x02ca, B:31:0x01ff, B:33:0x02b2, B:35:0x02b8, B:37:0x02be, B:39:0x02ce, B:40:0x02e1, B:42:0x02f0, B:44:0x02f8, B:45:0x02fc, B:47:0x0302, B:48:0x0321, B:50:0x0338, B:52:0x0343, B:54:0x034d, B:55:0x0351, B:69:0x03e2, B:73:0x0423, B:74:0x0428, B:76:0x0431, B:72:0x03ea, B:58:0x037c, B:60:0x0382, B:62:0x0388, B:64:0x0396, B:66:0x03c8, B:65:0x03c1), top: B:210:0x01ad }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0431 A[Catch: Exception -> 0x08b5, TRY_LEAVE, TryCatch #1 {Exception -> 0x08b5, blocks: (B:15:0x01ad, B:17:0x01b7, B:19:0x01c5, B:21:0x01d5, B:25:0x01dd, B:26:0x01eb, B:28:0x01f1, B:38:0x02ca, B:31:0x01ff, B:33:0x02b2, B:35:0x02b8, B:37:0x02be, B:39:0x02ce, B:40:0x02e1, B:42:0x02f0, B:44:0x02f8, B:45:0x02fc, B:47:0x0302, B:48:0x0321, B:50:0x0338, B:52:0x0343, B:54:0x034d, B:55:0x0351, B:69:0x03e2, B:73:0x0423, B:74:0x0428, B:76:0x0431, B:72:0x03ea, B:58:0x037c, B:60:0x0382, B:62:0x0388, B:64:0x0396, B:66:0x03c8, B:65:0x03c1), top: B:210:0x01ad }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private java.lang.String l() {
        /*
            Method dump skipped, instructions count: 2602
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.l():java.lang.String");
    }

    public static Object[] loadPic(Map<String, String> map) {
        try {
            String str = map.get(C0242.m1245(f36short, 2907, 4, 624));
            String str2 = map.get(C0252.m1274(f36short, 2911, 3, 3267));
            if (L == null) {
                HashMap<String, String> hashMap = new HashMap<>();
                L = hashMap;
                hashMap.put(C0243.m1246(f36short, 2914, 10, 2854), C0248.m1262(f36short, 2924, 114, 505));
                L.put(C0252.m1274(f36short, 3038, 7, 1840), str);
            }
            a aVar = new a() { // from class: com.github.catvod.spider.XBPQ.7
                /* JADX INFO: Access modifiers changed from: protected */
                @Override // com.github.catvod.spider.merge.h1.k.c
                public final void onFailure(Call call, Exception exc) {
                }

                @Override // com.github.catvod.spider.merge.h1.k.c
                protected final /* bridge */ /* synthetic */ void onResponse(Response response) {
                }
            };
            g.c(g.b(), str2, L, aVar);
            if (aVar.getResult().code() == 200) {
                String str3 = aVar.getResult().headers().get(C0245.m1252(f36short, 3045, 12, 2796));
                if (str3 == null) {
                    str3 = C0240.m1237(f36short, 3057, 24, 3216);
                }
                System.out.println(str2);
                System.out.println(str3);
                return new Object[]{200, str3, aVar.getResult().body().byteStream()};
            }
            return null;
        } catch (Throwable unused) {
            return null;
        }
    }

    private JSONObject m(String str, String str2) {
        String str3;
        StringBuilder sb;
        String str4;
        StringBuilder sb2;
        String str5;
        StringBuilder sb3;
        String str6 = str2;
        String str7 = str;
        String m1257 = C0246.m1257(f36short, 3081, 1, 551);
        try {
            if (str6.equals(C0250.m1267(f36short, 3082, 4, 1405)) || str6.equals(C0238.m1232(f36short, 3086, 8, 1456))) {
                str6 = C0242.m1245(f36short, 3094, 2, 2072) + this.f + C0244.m1250(f36short, 3096, 60, 2635);
            }
            String[] split = str6.split(C0248.m1262(f36short, 3156, 1, 2793));
            int length = str6.length();
            String m1265 = C0249.m1265(f36short, 3157, 48, 1471);
            String m1258 = C0247.m1258(f36short, 3205, 46, 1174);
            String m1252 = C0245.m1252(f36short, 3251, 29, 2741);
            String m12522 = C0245.m1252(f36short, 3280, 1, 1592);
            String m1245 = C0242.m1245(f36short, 3281, 2, 1179);
            if (length < 1) {
                if (m1245.equals(this.r)) {
                    sb3 = new StringBuilder();
                    sb3.append(this.f);
                    sb3.append(m1265);
                } else {
                    sb3 = new StringBuilder();
                    sb3.append(this.f);
                    sb3.append(m1258);
                }
                str3 = sb3.toString();
                if (this.s.indexOf(m12522) >= 0) {
                    str7 = this.f + m1252;
                }
            } else {
                if (this.s.indexOf(m12522) >= 0) {
                    str7 = this.f + m1252;
                }
                boolean equals = m1257.equals(split[0]);
                String m12582 = C0247.m1258(f36short, 3283, 4, 2663);
                String m12572 = C0246.m1257(f36short, 3287, 1, 662);
                if (!equals) {
                    if (split[0].startsWith(m12582)) {
                        str7 = split[0];
                    } else {
                        if (split[0].startsWith(m12572)) {
                            sb2 = new StringBuilder();
                            sb2.append(this.f);
                            str5 = split[0];
                        } else {
                            sb2 = new StringBuilder();
                            sb2.append(this.f);
                            sb2.append(m12572);
                            str5 = split[0];
                        }
                        sb2.append(str5);
                        str7 = sb2.toString();
                    }
                }
                if (m1245.equals(this.r)) {
                    str3 = this.f + m1265;
                    if (!m1257.equals(split[2])) {
                        if (split[2].startsWith(m12582)) {
                            str3 = split[2];
                        } else {
                            if (split[2].startsWith(m12572)) {
                                sb = new StringBuilder();
                                sb.append(this.f);
                                str4 = split[2];
                            } else {
                                sb = new StringBuilder();
                                sb.append(this.f);
                                sb.append(m12572);
                                str4 = split[2];
                            }
                            sb.append(str4);
                            str3 = sb.toString();
                        }
                    }
                } else {
                    str3 = this.f + m1258;
                    if (!m1257.equals(split[1])) {
                        if (split[1].startsWith(m12582)) {
                            str3 = split[1];
                        } else {
                            if (split[1].startsWith(m12572)) {
                                sb = new StringBuilder();
                                sb.append(this.f);
                                str4 = split[1];
                            } else {
                                sb = new StringBuilder();
                                sb.append(this.f);
                                sb.append(m12572);
                                str4 = split[1];
                            }
                            sb.append(str4);
                            str3 = sb.toString();
                        }
                    }
                }
            }
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(C0249.m1265(f36short, 3288, 3, 1051), str7);
            jSONObject.put(C0243.m1246(f36short, 3291, 7, 2119), str3);
            return jSONObject;
        } catch (Exception e) {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0244.m1250(f36short, 3298, 17, 1665)), spiderApi);
                return null;
            }
            return null;
        }
    }

    private JSONObject o(String str, String str2, String str3) {
        String str4;
        String m1262 = C0248.m1262(f36short, 3315, 1, 1572);
        String m1258 = C0247.m1258(f36short, 3316, 1, 1029);
        String m1252 = C0245.m1252(f36short, 3317, 10, 636);
        try {
            Response execute = g.b().newCall(new Request.Builder().url(str).addHeader(m1252, J("")).build()).execute();
            String str5 = execute.headers().get(C0242.m1245(f36short, 3327, 10, 1942));
            InputStream byteStream = execute.body().byteStream();
            byte[] bArr = new byte[1024];
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            while (true) {
                int read = byteStream.read(bArr);
                if (read == -1) {
                    break;
                }
                byteArrayOutputStream.write(bArr, 0, read);
            }
            String replaceAll = Base64.encodeToString(byteArrayOutputStream.toByteArray(), 0).replaceAll(C0242.m1245(f36short, 3337, 2, 3017), "");
            if (str3.equals(m1258)) {
                str4 = C0241.m1242(f36short, 3339, 21, 602) + replaceAll + C0245.m1252(f36short, 3360, 25, 1919);
            } else {
                str4 = "";
            }
            if (str3.equals(m1262)) {
                str4 = C0241.m1242(f36short, 3385, 21, 1321) + replaceAll + C0241.m1242(f36short, 3406, 2, 3202);
            }
            JSONObject jSONObject = new JSONObject(g.b().newCall(new Request.Builder().url(str2).post(RequestBody.create(MediaType.parse(C0249.m1265(f36short, 3408, 16, 574)), str4)).addHeader(m1252, J("")).build()).execute().body().string());
            JSONObject jSONObject2 = new JSONObject();
            boolean equals = str3.equals(m1258);
            String m1265 = C0249.m1265(f36short, 3424, 6, 2474);
            String m1271 = C0251.m1271(f36short, 3430, 4, 2949);
            String m1232 = C0238.m1232(f36short, 3434, 6, 908);
            if (equals) {
                jSONObject2.put(m1232, str5);
                jSONObject2.put(m1271, jSONObject.getString(m1265));
                return jSONObject2;
            } else if (str3.equals(m1262)) {
                jSONObject2.put(m1232, str5);
                jSONObject2.put(m1271, jSONObject.getJSONObject(m1265).getString(C0241.m1242(f36short, 3440, 6, 506)).replaceAll(C0245.m1252(f36short, 3446, 6, 1358), ""));
                return jSONObject2;
            } else {
                return null;
            }
        } catch (Exception e) {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0238.m1232(f36short, 3452, 15, 1594)), spiderApi);
                return null;
            }
            return null;
        }
    }

    private String p(String str, String str2) {
        if (str.indexOf(str2) < 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        String m1262 = C0248.m1262(f36short, 3467, 1, 1473);
        sb.append(m1262);
        sb.append(str);
        sb.append(m1262);
        String sb2 = sb.toString();
        return sb2.replaceAll(C0243.m1246(f36short, 3468, 2, 3251) + str2 + C0242.m1245(f36short, 3470, 13, 2203), C0249.m1265(f36short, 3483, 2, 2385));
    }

    /* JADX WARN: Removed duplicated region for block: B:52:0x02e2 A[Catch: Exception -> 0x0624, TryCatch #0 {Exception -> 0x0624, blocks: (B:3:0x006a, B:8:0x00b8, B:11:0x00fb, B:29:0x0185, B:12:0x0109, B:14:0x0117, B:17:0x0123, B:19:0x0130, B:20:0x0138, B:22:0x0145, B:23:0x014c, B:25:0x0159, B:26:0x0160, B:28:0x017e, B:30:0x0191, B:33:0x0257, B:37:0x0263, B:39:0x027a, B:40:0x027e, B:42:0x0284, B:44:0x0291, B:46:0x02bf, B:50:0x02cb, B:52:0x02e2, B:53:0x02e6, B:55:0x02ec, B:58:0x02fc, B:60:0x0339, B:62:0x033f, B:63:0x036f, B:65:0x039c, B:67:0x03a2, B:68:0x03b3, B:69:0x03fa, B:71:0x0400, B:73:0x0429, B:97:0x04e8, B:99:0x04ee, B:101:0x0507, B:103:0x050d, B:105:0x0573, B:107:0x057a, B:109:0x0580, B:111:0x058b, B:113:0x0591, B:115:0x05a0, B:117:0x05b7, B:119:0x05c2, B:127:0x05fd, B:126:0x05e5, B:76:0x0445, B:78:0x045c, B:82:0x0467, B:84:0x047e, B:87:0x049b, B:89:0x04b2, B:91:0x04c9, B:48:0x02c5, B:35:0x025d), top: B:139:0x006a }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x02ec A[Catch: Exception -> 0x0624, TryCatch #0 {Exception -> 0x0624, blocks: (B:3:0x006a, B:8:0x00b8, B:11:0x00fb, B:29:0x0185, B:12:0x0109, B:14:0x0117, B:17:0x0123, B:19:0x0130, B:20:0x0138, B:22:0x0145, B:23:0x014c, B:25:0x0159, B:26:0x0160, B:28:0x017e, B:30:0x0191, B:33:0x0257, B:37:0x0263, B:39:0x027a, B:40:0x027e, B:42:0x0284, B:44:0x0291, B:46:0x02bf, B:50:0x02cb, B:52:0x02e2, B:53:0x02e6, B:55:0x02ec, B:58:0x02fc, B:60:0x0339, B:62:0x033f, B:63:0x036f, B:65:0x039c, B:67:0x03a2, B:68:0x03b3, B:69:0x03fa, B:71:0x0400, B:73:0x0429, B:97:0x04e8, B:99:0x04ee, B:101:0x0507, B:103:0x050d, B:105:0x0573, B:107:0x057a, B:109:0x0580, B:111:0x058b, B:113:0x0591, B:115:0x05a0, B:117:0x05b7, B:119:0x05c2, B:127:0x05fd, B:126:0x05e5, B:76:0x0445, B:78:0x045c, B:82:0x0467, B:84:0x047e, B:87:0x049b, B:89:0x04b2, B:91:0x04c9, B:48:0x02c5, B:35:0x025d), top: B:139:0x006a }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x02f9  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0400 A[Catch: Exception -> 0x0624, TryCatch #0 {Exception -> 0x0624, blocks: (B:3:0x006a, B:8:0x00b8, B:11:0x00fb, B:29:0x0185, B:12:0x0109, B:14:0x0117, B:17:0x0123, B:19:0x0130, B:20:0x0138, B:22:0x0145, B:23:0x014c, B:25:0x0159, B:26:0x0160, B:28:0x017e, B:30:0x0191, B:33:0x0257, B:37:0x0263, B:39:0x027a, B:40:0x027e, B:42:0x0284, B:44:0x0291, B:46:0x02bf, B:50:0x02cb, B:52:0x02e2, B:53:0x02e6, B:55:0x02ec, B:58:0x02fc, B:60:0x0339, B:62:0x033f, B:63:0x036f, B:65:0x039c, B:67:0x03a2, B:68:0x03b3, B:69:0x03fa, B:71:0x0400, B:73:0x0429, B:97:0x04e8, B:99:0x04ee, B:101:0x0507, B:103:0x050d, B:105:0x0573, B:107:0x057a, B:109:0x0580, B:111:0x058b, B:113:0x0591, B:115:0x05a0, B:117:0x05b7, B:119:0x05c2, B:127:0x05fd, B:126:0x05e5, B:76:0x0445, B:78:0x045c, B:82:0x0467, B:84:0x047e, B:87:0x049b, B:89:0x04b2, B:91:0x04c9, B:48:0x02c5, B:35:0x025d), top: B:139:0x006a }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private org.json.JSONObject q() {
        /*
            Method dump skipped, instructions count: 1651
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.q():org.json.JSONObject");
    }

    private String s(int i, String str, String str2) {
        String[] split;
        StringBuilder sb;
        String str3;
        String str4;
        String[] split2;
        StringBuilder sb2;
        String str5;
        String m1250 = C0244.m1250(f36short, 4122, 1, 3053);
        String replaceAll = n.b(d.b(m1250), this.c, m1250).replaceAll(C0252.m1274(f36short, 4123, 10, 2057) + str + C0238.m1232(f36short, 4133, 3, 2645), C0242.m1245(f36short, 4136, 2, 2699));
        String m1267 = C0250.m1267(f36short, 4138, 2, 920);
        int indexOf = str2.indexOf(m1267);
        String m1257 = C0246.m1257(f36short, 4140, 2, 2527);
        if (indexOf >= 0 || str2.indexOf(m1257) >= 0) {
            int indexOf2 = str2.indexOf(m1257);
            String m12572 = C0246.m1257(f36short, 4142, 4, 1016);
            if (indexOf2 < 0) {
                return str + m1257 + str2.split(m12572)[i];
            }
            int indexOf3 = str2.indexOf(m1267);
            String m12573 = C0246.m1257(f36short, 4146, 1, 3015);
            if (indexOf3 < 0) {
                if (replaceAll.equals(str2.split(m1257)[0])) {
                    sb = new StringBuilder(str);
                    sb.append(m1257);
                    str3 = str2.split(m1257)[1];
                    sb.append(str3);
                    str4 = sb.toString();
                    break;
                }
                str4 = m12573;
            } else {
                for (String str6 : str2.split(m12572)) {
                    if (replaceAll.equals(str6.split(m1257)[0])) {
                        sb = new StringBuilder(str);
                        sb.append(m1257);
                        str3 = str6.split(m1257)[1];
                        sb.append(str3);
                        str4 = sb.toString();
                        break;
                    }
                }
                str4 = m12573;
            }
            if (str4.equals(m12573)) {
                if (str2.indexOf(m1267) < 0) {
                    String str7 = str2.split(m1257)[0];
                    StringBuilder b = d.b("");
                    b.append(i + 1);
                    if (str7.equals(b.toString())) {
                        sb2 = new StringBuilder(str);
                        sb2.append(m1257);
                        str5 = str2.split(m1257)[1];
                        sb2.append(str5);
                        return sb2.toString();
                    }
                } else {
                    for (String str8 : str2.split(m12572)) {
                        String str9 = str8.split(m1257)[0];
                        StringBuilder b2 = d.b("");
                        b2.append(i + 1);
                        if (str9.equals(b2.toString())) {
                            sb2 = new StringBuilder(str);
                            sb2.append(m1257);
                            str5 = str8.split(m1257)[1];
                            sb2.append(str5);
                            return sb2.toString();
                        }
                    }
                }
            }
            return str4;
        }
        return str2;
    }

    private JSONArray t(String str, String str2) {
        String str3 = str2;
        String str4 = str;
        try {
            if (str3.length() < 1) {
                return new JSONArray(str4);
            }
            if (str3.indexOf(C0247.m1258(f36short, 4147, 2, 1531)) >= 0) {
                str3 = C0249.m1265(f36short, 4149, 4, 1301);
            }
            JSONArray jSONArray = new JSONArray();
            int indexOf = str3.indexOf(C0250.m1267(f36short, 4153, 1, 1879));
            String str5 = "";
            String m1245 = C0242.m1245(f36short, 4154, 2, 637);
            if (indexOf >= 0) {
                String replaceAll = str3.replaceAll(C0246.m1257(f36short, 4156, 13, 823), m1245);
                str3 = str3.replaceAll(C0241.m1242(f36short, 4169, 4, 891), "");
                str5 = replaceAll;
            }
            String[] split = str3.split(C0246.m1257(f36short, 4173, 2, 2624));
            int i = 0;
            for (int i2 = 0; i2 < split.length; i2++) {
                JSONObject jSONObject = new JSONObject(str4);
                if (i2 == split.length - 1) {
                    if (jSONObject.get(split[i2]) instanceof JSONObject) {
                        jSONArray.put(jSONObject.getJSONObject(split[i2]));
                        return jSONArray;
                    }
                    JSONArray jSONArray2 = jSONObject.getJSONArray(split[i2]);
                    int length = jSONArray2.length();
                    if (str5 == null || str5.length() <= 0) {
                        return jSONArray2;
                    }
                    int indexOf2 = str5.indexOf(C0244.m1250(f36short, 4175, 1, 1880));
                    String m1237 = C0240.m1237(f36short, 4176, 3, 1394);
                    if (indexOf2 >= 0 || !str5.matches(m1237)) {
                        String replaceAll2 = str5.replaceAll(C0240.m1237(f36short, 4179, 7, 1316), m1245);
                        String replaceAll3 = str5.replaceAll(C0251.m1271(f36short, 4186, 7, 3010), m1245);
                        if (replaceAll3 != null && replaceAll3.length() > 0 && replaceAll3.matches(m1237) && Integer.parseInt(replaceAll3) < length) {
                            length = Integer.parseInt(replaceAll3);
                        }
                        if (replaceAll2 != null && replaceAll2.length() > 0 && replaceAll2.matches(m1237) && Integer.parseInt(replaceAll2) <= length) {
                            i = Integer.parseInt(replaceAll2) - 1;
                        }
                    } else {
                        if (length > Integer.parseInt(str5)) {
                            length = Integer.parseInt(str5);
                        }
                        i = length - 1;
                    }
                    while (i < length) {
                        jSONArray.put(jSONArray2.getJSONObject(i));
                        i++;
                    }
                    return jSONArray;
                }
                str4 = jSONObject.getJSONObject(split[i2]).toString();
            }
            return null;
        } catch (JSONException e) {
            if (this.m) {
                Init.show(this.G + C0242.m1245(f36short, 4193, 19, 2625) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                StringBuilder b = d.b(C0246.m1257(f36short, 4212, 20, 1773));
                b.append(e.toString());
                spiderApi.log(b.toString());
            }
            return null;
        }
    }

    private String u(String str, String str2) {
        String sb;
        String j;
        String str3 = str2;
        String str4 = "";
        if (str3.indexOf(C0252.m1274(f36short, 4232, 2, 523)) >= 0) {
            String replaceAll = str3.replaceAll(C0248.m1262(f36short, 4234, 25, 3065), C0238.m1232(f36short, 4259, 2, 2193));
            str3 = str3.replaceAll(C0244.m1250(f36short, 4261, 21, 2202), "");
            str4 = replaceAll;
        }
        if (str3.indexOf(C0248.m1262(f36short, 4282, 1, 1164)) < 0) {
            sb = v(str, str3);
        } else {
            String[] split = str3.split(C0240.m1237(f36short, 4283, 2, 1882));
            StringBuilder sb2 = new StringBuilder();
            for (int i = 0; i < split.length; i++) {
                if (split[i].startsWith(C0244.m1250(f36short, 4285, 4, 2424))) {
                    String substring = split[i].substring(4);
                    if (substring.indexOf(C0240.m1237(f36short, 4289, 5, 774)) > 0) {
                        String[] split2 = substring.split(C0242.m1245(f36short, 4294, 7, 3173));
                        if (split2.length > 1) {
                            j = v(j(split2[0]), split2[1]);
                        } else {
                            substring = split2[0];
                        }
                    }
                    j = j(substring);
                } else {
                    j = v(str, split[i]);
                }
                if (j.length() > 0) {
                    if (j.startsWith(C0238.m1232(f36short, 4301, 4, 2899)) && !sb2.toString().trim().endsWith(C0249.m1265(f36short, 4305, 1, 787)) && !sb2.toString().trim().endsWith(C0244.m1250(f36short, 4306, 2, 2369))) {
                        sb2 = new StringBuilder();
                    }
                    sb2.append(j);
                }
            }
            sb = sb2.toString();
        }
        return a0(str4, sb);
    }

    private String v(String str, String str2) {
        String str3 = str2;
        String str4 = str;
        String m1242 = C0241.m1242(f36short, 4308, 1, 1847);
        String m1246 = C0243.m1246(f36short, 4309, 2, 1813);
        if (str3.endsWith(m1246)) {
            str3 = str3.replace(m1246, "");
            if (this.x.length() > 0) {
                str4 = this.x;
            }
        }
        try {
            if (str3.indexOf(m1242) >= 0) {
                return str3.replace(m1242, "");
            }
            if (str3.indexOf(C0245.m1252(f36short, 4311, 2, 801)) >= 0 || str3.length() < 1) {
                str3 = C0249.m1265(f36short, 4313, 4, 1716);
            }
            if (str3.indexOf(C0250.m1267(f36short, 4317, 2, 1589)) < 0) {
                return w(str4, str3);
            }
            String m12462 = C0243.m1246(f36short, 4319, 1, 3185);
            String[] split = str3.split(C0252.m1274(f36short, 4320, 4, 382));
            int length = split.length;
            String m1257 = C0246.m1257(f36short, 4324, 1, 2657);
            if (length > 2) {
                for (int i = 0; i < split.length - 2; i++) {
                    str4 = t(str4, split[i] + m1257).getJSONObject(0).toString();
                }
            }
            String str5 = split[split.length - 1];
            String str6 = split[split.length - 2] + m1257;
            if (str5.indexOf(C0247.m1258(f36short, 4325, 1, 1122)) >= 0) {
                m12462 = str5.replaceAll(C0252.m1274(f36short, 4326, 13, 1556), C0249.m1265(f36short, 4339, 2, 2590));
                str5 = str5.replaceAll(C0241.m1242(f36short, 4341, 4, 1567), "");
            }
            JSONArray t = t(str4, str6);
            StringBuilder sb = new StringBuilder();
            if (t == null || t.length() <= 0) {
                return "";
            }
            for (int i2 = 0; i2 < t.length(); i2++) {
                String jSONObject = t.getJSONObject(i2).toString();
                if (i2 == t.length() - 1) {
                    m12462 = "";
                }
                sb.append(w(jSONObject, str5));
                sb.append(m12462);
            }
            return sb.toString();
        } catch (JSONException e) {
            if (this.m) {
                Init.show(this.G + C0240.m1237(f36short, 4345, 31, 713) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                StringBuilder b = d.b(C0240.m1237(f36short, 4376, 32, 1775));
                b.append(e.toString());
                spiderApi.log(b.toString());
            }
            return "";
        }
    }

    private String w(String str, String str2) {
        boolean z;
        String replaceAll;
        JSONObject put;
        String str3 = str2;
        String str4 = str;
        try {
            if (str3.indexOf(C0243.m1246(f36short, 4408, 2, 3161)) >= 0 || str3.length() < 1) {
                str3 = C0242.m1245(f36short, 4410, 4, 765);
            }
            if (str3.endsWith(C0245.m1252(f36short, 4414, 6, 1713))) {
                str3 = str3.substring(0, str3.length() - 6);
                z = true;
            } else {
                z = false;
            }
            if (str3.indexOf(C0250.m1267(f36short, 4420, 1, 1756)) < 0) {
                String[] split = str3.split(C0250.m1267(f36short, 4421, 2, 3187));
                for (int i = 0; i < split.length; i++) {
                    JSONObject jSONObject = new JSONObject(str4);
                    if (i == split.length - 1) {
                        if (z) {
                            Object obj = jSONObject.get(split[i]);
                            if (obj instanceof JSONObject) {
                                put = (JSONObject) obj;
                            } else if (obj instanceof JSONArray) {
                                put = new JSONObject().put(split[i], (JSONArray) obj);
                            } else {
                                replaceAll = "";
                            }
                            replaceAll = put.toString();
                        } else {
                            replaceAll = jSONObject.optString(split[i]).trim().replaceAll(C0242.m1245(f36short, 4423, 2, 1217), "").replaceAll(C0247.m1258(f36short, 4425, 2, 2430), "").replaceAll(C0251.m1271(f36short, 4427, 1, 2835), "");
                        }
                        return replaceAll != null ? replaceAll : "";
                    }
                    str4 = jSONObject.getJSONObject(split[i]).toString();
                }
            }
            return "";
        } catch (JSONException e) {
            if (this.m) {
                Init.show(this.G + C0238.m1232(f36short, 4428, 20, 2487) + e.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                StringBuilder b = d.b(C0247.m1258(f36short, 4448, 21, 1771));
                b.append(e.toString());
                spiderApi.log(b.toString());
            }
            return "";
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:990:0x1752
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    private org.json.JSONObject x(java.lang.String r63, java.lang.String r64, boolean r65, java.util.HashMap<java.lang.String, java.lang.String> r66) {
        /*
            Method dump skipped, instructions count: 7307
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.x(java.lang.String, java.lang.String, boolean, java.util.HashMap):org.json.JSONObject");
    }

    /* JADX WARN: Removed duplicated region for block: B:65:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x027d A[Catch: Exception -> 0x02e4, TryCatch #0 {Exception -> 0x02e4, blocks: (B:3:0x0006, B:7:0x008a, B:9:0x0092, B:11:0x00ad, B:13:0x00dd, B:77:0x02b6, B:10:0x00a0, B:12:0x00bf, B:17:0x0119, B:19:0x0132, B:63:0x0273, B:66:0x027d, B:68:0x0285, B:69:0x0288, B:71:0x0290, B:72:0x029c, B:74:0x02b0, B:73:0x02a0, B:22:0x014d, B:24:0x0155, B:25:0x0159, B:27:0x0161, B:28:0x016d, B:62:0x026f, B:29:0x0172, B:30:0x0182, B:33:0x019d, B:35:0x01a5, B:36:0x01a9, B:38:0x01b1, B:39:0x01be, B:40:0x01ce, B:42:0x01f8, B:45:0x0202, B:47:0x020a, B:48:0x020d, B:50:0x0215, B:51:0x0223, B:52:0x0234, B:55:0x023d, B:57:0x0245, B:58:0x0248, B:60:0x0250, B:61:0x025e), top: B:85:0x0006 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private org.json.JSONObject y(java.lang.String r63, boolean r64) {
        /*
            Method dump skipped, instructions count: 771
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.y(java.lang.String, boolean):org.json.JSONObject");
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x0295  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    protected final java.util.HashMap<java.lang.String, java.lang.String> I(java.lang.String r64) {
        /*
            Method dump skipped, instructions count: 780
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.I(java.lang.String):java.util.HashMap");
    }

    /* JADX WARN: Code restructure failed: missing block: B:54:0x0329, code lost:
        if (r11.indexOf(r49) < 0) goto L52;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    protected final java.lang.String J(java.lang.String r62) {
        /*
            Method dump skipped, instructions count: 863
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.J(java.lang.String):java.lang.String");
    }

    final String U(String str) {
        return com.github.catvod.spider.merge.h1.N.a.l(str).p0();
    }

    public String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        SpiderApi spiderApi = this.I;
        if (spiderApi != null) {
            spiderApi.log(C0243.m1246(f36short, 5219, 20, 1400) + str + C0243.m1246(f36short, 5239, 5, 3182) + str2 + C0244.m1250(f36short, 5244, 9, 1770) + z + C0244.m1250(f36short, 5253, 9, 1247) + hashMap.toString() + C0251.m1271(f36short, 5262, 1, 2879));
        }
        JSONObject e = e(str, str2, z, hashMap);
        return e != null ? e.toString() : "";
    }

    protected final String d0(String str, String str2, String str3, String str4) {
        String sb;
        HashMap<String, String> I;
        String str5 = str4;
        String str6 = str3;
        String str7 = this.A;
        String m1267 = C0250.m1267(f36short, 5263, 1, 1697);
        if (m1267.equals(str7)) {
            return str6;
        }
        int i = this.H + 1;
        this.H = i;
        String m1271 = C0251.m1271(f36short, 5264, 1, 2393);
        if (i == 2 && this.s.indexOf(m1271) < 0) {
            this.s = n.b(new StringBuilder(), this.s, m1271);
        }
        if (this.H == 4) {
            this.H = 0;
            return str6;
        }
        String m12672 = C0250.m1267(f36short, 5265, 3, 776);
        String str8 = str2.split(m12672)[1];
        String str9 = str2.split(m12672)[0];
        try {
            JSONObject m = m(str9, str5);
            final String string = m.getString(C0244.m1250(f36short, 5268, 3, 1074));
            str5 = m.getString(C0246.m1257(f36short, 5271, 7, 2449));
            if (str6.indexOf(C0251.m1271(f36short, 5278, 5, 2822)) >= 0) {
                k.i = C0238.m1232(f36short, 5283, 6, 367);
            } else {
                int indexOf = str6.indexOf(C0249.m1265(f36short, 5289, 4, 2870));
                String m1250 = C0244.m1250(f36short, 5293, 4, 2958);
                if (indexOf < 0 && str6.indexOf(m1250) < 0) {
                    k.i = C0244.m1250(f36short, 5297, 4, 697);
                    string = str9;
                }
                k.i = m1250;
            }
            final String str10 = this.z;
            Init.run(new Runnable() { // from class: com.github.catvod.spider.Czztoo

                /* renamed from: short  reason: not valid java name */
                private static final short[] f20short = {27841, 28980, -25363, -32148, -28319, -32724};

                @Override // java.lang.Runnable
                public final void run() {
                    final XBPQ xbpq = XBPQ.this;
                    String str11 = string;
                    final String str12 = str10;
                    String str13 = XBPQ.K;
                    xbpq.getClass();
                    k.A(C0241.m1242(f20short, 0, 6, 3053), str11, str12, new j() { // from class: com.github.catvod.spider.XBPQ.4

                        /* renamed from: short  reason: not valid java name */
                        private static final short[] f39short = {2888, 2888, 2888, 732, 2883, 2875, 2883, 2875, 2883, 2875, 504, 3102, 3124, 3104, 3098, 3201, 1011, 587, 600, 604, 585, 589};

                        @Override // com.github.catvod.spider.merge.h1.j.j
                        public void vertifyCode(String str14) {
                            String[] split;
                            int indexOf2 = str14.indexOf(C0249.m1265(f39short, 0, 3, 2924));
                            String m1242 = C0241.m1242(f39short, 3, 1, 748);
                            if (indexOf2 <= 1) {
                                XBPQ.this.A = m1242;
                                return;
                            }
                            String[] split2 = str14.split(C0245.m1252(f39short, 4, 6, 2847));
                            XBPQ.this.A = split2.length > 1 ? split2[1] : C0248.m1262(f39short, 10, 1, 457);
                            SharedPreferences.Editor edit = Init.d.edit();
                            String b = n.b(new StringBuilder(), XBPQ.this.G, C0244.m1250(f39short, 11, 3, 3137));
                            String str15 = split2[0];
                            String m1274 = C0252.m1274(f39short, 14, 1, 3129);
                            edit.putString(b, str15.split(m1274)[0]);
                            XBPQ.K = split2[0].split(m1274)[0];
                            XBPQ.this.z = split2[0].split(m1274)[1];
                            if (str12.length() > 2) {
                                String str16 = str12;
                                String m1258 = C0247.m1258(f39short, 15, 1, 3258);
                                for (String str17 : str16.split(m1258)) {
                                    String str18 = XBPQ.this.z;
                                    String m1265 = C0249.m1265(f39short, 16, 1, 974);
                                    if (str18.indexOf(str17.split(m1265)[0]) < 0) {
                                        XBPQ xbpq2 = XBPQ.this;
                                        if (xbpq2.z.length() >= 1 && !m1242.equals(XBPQ.this.z)) {
                                            str17 = XBPQ.this.z + m1258 + str17;
                                        }
                                        xbpq2.z = str17;
                                    } else {
                                        XBPQ.this.z = n.b(new StringBuilder(), XBPQ.this.z, m1258).replaceAll(n.b(new StringBuilder(), str17.split(m1265)[0], C0251.m1271(f39short, 17, 5, 630)), str17 + m1258);
                                        XBPQ xbpq3 = XBPQ.this;
                                        xbpq3.z = xbpq3.z.substring(0, XBPQ.this.z.length() - 1);
                                    }
                                }
                            }
                            edit.putString(XBPQ.this.G, XBPQ.this.z);
                            edit.apply();
                        }
                    });
                }
            }, 200);
            while ("".equals(this.A)) {
                try {
                    Thread.sleep(500L);
                } catch (Exception e) {
                    if (this.m) {
                        Init.show(this.G + C0247.m1258(f36short, 5301, 21, 738) + e.toString());
                    }
                    SpiderApi spiderApi = this.I;
                    if (spiderApi != null) {
                        spiderApi.log(C0240.m1237(f36short, 5322, 20, 2572) + e.toString());
                    }
                }
            }
        } catch (Exception e2) {
            if (this.m) {
                Init.show(this.G + C0241.m1242(f36short, 5342, 9, 2394) + e2.toString());
            }
            SpiderApi spiderApi2 = this.I;
            if (spiderApi2 != null) {
                b.a(e2, d.b(C0241.m1242(f36short, 5351, 7, 2061)), spiderApi2);
            }
        }
        if (C0241.m1242(f36short, 5358, 1, 1905).equals(this.A)) {
            this.A = "";
        }
        if (!"".equals(this.A) && !m1267.equals(this.A) && this.s.indexOf(C0246.m1257(f36short, 5359, 1, 3006)) < 0) {
            String m1245 = C0242.m1245(f36short, 5360, 6, 1233);
            if (str5.indexOf(m1245) > 0) {
                sb = str5.replace(m1245, this.A);
            } else {
                StringBuilder b = d.b(str5);
                b.append(this.A);
                sb = b.toString();
            }
            if (C0246.m1257(f36short, 5366, 2, 2926).equals(this.r)) {
                I = I(str9);
            } else if (this.s.indexOf(m1271) >= 0) {
                I = r(str9);
            } else {
                this.s = n.b(new StringBuilder(), this.s, m1271);
                I = r(str9);
                this.s = this.s.replace(m1271, "");
            }
            if (this.m) {
                Init.show(this.z);
            }
            try {
                if (sb.indexOf(C0243.m1246(f36short, 5368, 6, 1485)) < 0) {
                    C0560b.g(sb, I);
                } else {
                    com.github.catvod.spider.merge.h1.k.b bVar = new com.github.catvod.spider.merge.h1.k.b() { // from class: com.github.catvod.spider.XBPQ.5
                        /* JADX INFO: Access modifiers changed from: protected */
                        @Override // com.github.catvod.spider.merge.h1.k.c
                        public final void onFailure(Call call, Exception exc) {
                        }

                        @Override // com.github.catvod.spider.merge.h1.k.c
                        protected final /* bridge */ /* synthetic */ void onResponse(String str11) {
                        }
                    };
                    g.e(g.b(), sb.split(C0240.m1237(f36short, 5374, 1, 3054))[0], null, I, bVar);
                    String result = bVar.getResult();
                    boolean z = this.m;
                    String m1252 = C0245.m1252(f36short, 5375, 4, 2267);
                    if (z) {
                        Init.show(result != null ? result : m1252);
                    }
                    SpiderApi spiderApi3 = this.I;
                    if (spiderApi3 != null) {
                        if ((C0240.m1237(f36short, 5379, 8, 1142) + result) == null) {
                            result = m1252;
                        }
                        spiderApi3.log(result);
                    }
                }
            } catch (Exception e3) {
                if (this.m) {
                    Init.show(this.G + C0242.m1245(f36short, 5387, 26, 1180) + e3.toString());
                }
                SpiderApi spiderApi4 = this.I;
                if (spiderApi4 != null) {
                    b.a(e3, d.b(C0238.m1232(f36short, 5413, 25, 2338)), spiderApi4);
                }
            }
            if (!m1267.equals(this.A)) {
                this.A = "";
            }
        }
        if (m1267.equals(this.A)) {
            return str6;
        }
        if (C0246.m1257(f36short, 5438, 5, 2068).equals(str)) {
            str6 = j(str8);
        }
        return C0244.m1250(f36short, 5443, 9, 1332).equals(str) ? k(str8) : str6;
    }

    public String decrypt(String str, String str2, String str3, String str4) {
        try {
            SecretKeySpec secretKeySpec = new SecretKeySpec(str3.getBytes(C0249.m1265(f36short, 5452, 5, 1474)), C0240.m1237(f36short, 5457, 3, 3126));
            Cipher cipher = Cipher.getInstance(C0245.m1252(f36short, 5460, 20, 2428));
            cipher.init(2, secretKeySpec, new IvParameterSpec(str4.getBytes()));
            return new String(cipher.doFinal(Base64.decode(str, 0)), str2);
        } catch (Exception e) {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0243.m1246(f36short, 5480, 14, 2423)), spiderApi);
                return null;
            }
            return null;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:727:0x10ff
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    public java.lang.String detailContent(java.util.List<java.lang.String> r59) {
        /*
            Method dump skipped, instructions count: 10693
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.detailContent(java.util.List):java.lang.String");
    }

    public String encrypt(String str, String str2, String str3, String str4) {
        try {
            Cipher cipher = Cipher.getInstance(C0248.m1262(f36short, 5494, 20, 2812));
            cipher.init(1, new SecretKeySpec(str3.getBytes(), C0251.m1271(f36short, 5514, 3, 766)), new IvParameterSpec(str4.getBytes()));
            return Base64.encodeToString(cipher.doFinal(str.getBytes(str2)), 0);
        } catch (Exception e) {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e, d.b(C0243.m1246(f36short, 5517, 14, 836)), spiderApi);
                return null;
            }
            return null;
        }
    }

    protected final String f(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        if (str.startsWith(C0243.m1246(f36short, 5531, 4, 1730))) {
            return str;
        }
        String str3 = this.b;
        String E = E(C0247.m1258(f36short, 5535, 4, 722), C0250.m1267(f36short, 5539, 7, 2898), C0245.m1252(f36short, 5546, 6, 500), "");
        String F = F(C0238.m1232(f36short, 5552, 3, 1601), C0240.m1237(f36short, 5555, 6, 2014), C0247.m1258(f36short, 5561, 7, 399), C0243.m1246(f36short, 5568, 9, 3062), C0238.m1232(f36short, 5577, 1, 1169));
        int length = this.r.length();
        String m1245 = C0242.m1245(f36short, 5578, 2, 2200);
        if (length > 0 && E.indexOf(C0248.m1262(f36short, 5580, 1, 3272)) >= 0 && E.indexOf(this.r) >= 0) {
            String a = n.a(E, C0246.m1257(f36short, 5581, 1, 1928));
            StringBuilder b = d.b(C0245.m1252(f36short, 5582, 2, 864));
            b.append(this.r);
            b.append(C0242.m1245(f36short, 5584, 13, 1926));
            str3 = a.replaceAll(b.toString(), m1245);
        }
        if (str3.indexOf(C0248.m1262(f36short, 5597, 1, 2170)) >= 0 || str3.indexOf(C0251.m1271(f36short, 5598, 1, 2781)) >= 0) {
            str3 = str2.equals(F) ? str3.replaceAll(C0241.m1242(f36short, 5599, 28, 3222), m1245).replace(C0247.m1258(f36short, 5627, 10, 551), "") : str3.replaceAll(C0249.m1265(f36short, 5637, 4, 2691), C0252.m1274(f36short, 5641, 2, 718)).replaceAll(C0251.m1271(f36short, 5643, 13, 413), m1245);
        }
        String m1257 = C0246.m1257(f36short, 5656, 1, 636);
        String m12452 = C0242.m1245(f36short, 5657, 1, 1240);
        if (z && this.a && hashMap != null && hashMap.size() > 0) {
            for (String str4 : hashMap.keySet()) {
                String str5 = hashMap.get(str4);
                if (str5.length() > 0) {
                    str3 = str3.replace(m12452 + str4 + m1257, URLEncoder.encode(str5));
                }
            }
        }
        String replace = str3.replace(C0250.m1267(f36short, 5658, 8, 624), str).replace(C0243.m1246(f36short, 5666, 8, 913), str2);
        Matcher matcher = Pattern.compile(C0245.m1252(f36short, 5674, 9, 2164)).matcher(replace);
        while (matcher.find()) {
            String replace2 = matcher.group(0).replace(m12452, "").replace(m1257, "");
            String replace3 = replace.replace(matcher.group(0), "");
            StringBuilder sb = new StringBuilder();
            String m12572 = C0246.m1257(f36short, 5683, 1, 875);
            sb.append(m12572);
            sb.append(replace2);
            sb.append(m12572);
            replace = replace3.replace(sb.toString(), "");
        }
        return replace;
    }

    protected final com.github.catvod.spider.merge.h1.f0.a g0(String str) {
        String j;
        int indexOf = str.indexOf(C0249.m1265(f36short, 5684, 5, 3049));
        String m1252 = C0245.m1252(f36short, 5689, 2, 2820);
        if (indexOf >= 0) {
            j = k(n.a(m1252, str));
        } else {
            StringBuilder b = d.b(m1252);
            b.append(str.split(C0251.m1271(f36short, 5691, 1, 3136))[0]);
            j = j(b.toString());
        }
        return new com.github.catvod.spider.merge.h1.f0.a(com.github.catvod.spider.merge.h1.N.a.l(j).R());
    }

    public String getToken(String str, String str2, String str3, String str4) {
        return encrypt(str, str2, str3, str4);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(37:1|2|3|(31:16|17|18|(23:(5:28|(1:150)|32|(1:34)(2:147|(1:149))|35)(1:151)|36|(1:38)|39|40|(8:42|43|44|(1:(4:54|55|56|57)(2:58|57))|59|55|56|57)|70|71|72|73|74|(11:79|(1:81)(2:139|(1:141)(1:142))|82|83|84|85|(1:130)(1:102)|103|(7:106|(2:(1:117)|(1:115))|118|(2:120|(1:122)(1:123))|124|(1:126)|(0))|127|128)|143|82|83|84|85|(6:87|89|91|93|95|100)|130|103|(7:106|(4:108|(1:112)|117|(0))|118|(0)|124|(0)|(0))|127|128)|152|(1:163)|156|(1:158)(2:160|(1:162))|159|36|(0)|39|40|(0)|70|71|72|73|74|(13:76|79|(0)(0)|82|83|84|85|(0)|130|103|(0)|127|128)|143|82|83|84|85|(0)|130|103|(0)|127|128)|164|17|18|(26:20|22|24|(0)(0)|36|(0)|39|40|(0)|70|71|72|73|74|(0)|143|82|83|84|85|(0)|130|103|(0)|127|128)|152|(1:154)|163|156|(0)(0)|159|36|(0)|39|40|(0)|70|71|72|73|74|(0)|143|82|83|84|85|(0)|130|103|(0)|127|128|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:135:0x05bc, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x05be, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x05bf, code lost:
        r6 = "";
     */
    /* JADX WARN: Code restructure failed: missing block: B:140:0x05c3, code lost:
        if (r79.m != false) goto L134;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x05c5, code lost:
        com.github.catvod.spider.Init.show(r79.G + com.github.catvod.spider.merge.h1.j.C0249.m1265(com.github.catvod.spider.XBPQ.f36short, 5891, 11, 391) + r0.toString());
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x05f1, code lost:
        r3 = r79.I;
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x05f3, code lost:
        if (r3 != null) goto L137;
     */
    /* JADX WARN: Code restructure failed: missing block: B:144:0x05f5, code lost:
        r3.log(com.github.catvod.spider.merge.h1.n0.C0250.m1267(com.github.catvod.spider.XBPQ.f36short, 5902, 10, 1695) + r0.toString());
     */
    /* JADX WARN: Removed duplicated region for block: B:113:0x04db A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0580 A[Catch: Exception -> 0x05bc, TryCatch #1 {Exception -> 0x05bc, blocks: (B:92:0x0439, B:94:0x044b, B:96:0x0462, B:98:0x0479, B:100:0x0490, B:102:0x04a7, B:105:0x04c7, B:107:0x04cd, B:111:0x04d7, B:114:0x04dd, B:116:0x04f4, B:120:0x050e, B:133:0x05a7, B:122:0x0525, B:123:0x052a, B:125:0x0580, B:127:0x0588, B:128:0x0591, B:129:0x0599, B:131:0x05a0), top: B:160:0x0439 }] */
    /* JADX WARN: Removed duplicated region for block: B:131:0x05a0 A[Catch: Exception -> 0x05bc, TryCatch #1 {Exception -> 0x05bc, blocks: (B:92:0x0439, B:94:0x044b, B:96:0x0462, B:98:0x0479, B:100:0x0490, B:102:0x04a7, B:105:0x04c7, B:107:0x04cd, B:111:0x04d7, B:114:0x04dd, B:116:0x04f4, B:120:0x050e, B:133:0x05a7, B:122:0x0525, B:123:0x052a, B:125:0x0580, B:127:0x0588, B:128:0x0591, B:129:0x0599, B:131:0x05a0), top: B:160:0x0439 }] */
    /* JADX WARN: Removed duplicated region for block: B:133:0x05a7 A[Catch: Exception -> 0x05bc, TRY_LEAVE, TryCatch #1 {Exception -> 0x05bc, blocks: (B:92:0x0439, B:94:0x044b, B:96:0x0462, B:98:0x0479, B:100:0x0490, B:102:0x04a7, B:105:0x04c7, B:107:0x04cd, B:111:0x04d7, B:114:0x04dd, B:116:0x04f4, B:120:0x050e, B:133:0x05a7, B:122:0x0525, B:123:0x052a, B:125:0x0580, B:127:0x0588, B:128:0x0591, B:129:0x0599, B:131:0x05a0), top: B:160:0x0439 }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0214 A[Catch: Exception -> 0x0621, TryCatch #3 {Exception -> 0x0621, blocks: (B:3:0x005d, B:5:0x00a8, B:7:0x00bf, B:9:0x00d6, B:11:0x00ed, B:13:0x0104, B:18:0x011f, B:21:0x01ee, B:23:0x01f4, B:25:0x01fa, B:29:0x0214, B:31:0x021e, B:34:0x0226, B:40:0x0248, B:54:0x02bf, B:56:0x02f1, B:57:0x02f3, B:145:0x061c, B:139:0x05c1, B:141:0x05c5, B:142:0x05f1, B:144:0x05f5, B:37:0x0240, B:42:0x0260, B:44:0x026a, B:47:0x0272, B:53:0x02a9, B:50:0x028e), top: B:164:0x005d }] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x025d  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x028b  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x028e A[Catch: Exception -> 0x0621, TryCatch #3 {Exception -> 0x0621, blocks: (B:3:0x005d, B:5:0x00a8, B:7:0x00bf, B:9:0x00d6, B:11:0x00ed, B:13:0x0104, B:18:0x011f, B:21:0x01ee, B:23:0x01f4, B:25:0x01fa, B:29:0x0214, B:31:0x021e, B:34:0x0226, B:40:0x0248, B:54:0x02bf, B:56:0x02f1, B:57:0x02f3, B:145:0x061c, B:139:0x05c1, B:141:0x05c5, B:142:0x05f1, B:144:0x05f5, B:37:0x0240, B:42:0x0260, B:44:0x026a, B:47:0x0272, B:53:0x02a9, B:50:0x028e), top: B:164:0x005d }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x02f1 A[Catch: Exception -> 0x0621, TryCatch #3 {Exception -> 0x0621, blocks: (B:3:0x005d, B:5:0x00a8, B:7:0x00bf, B:9:0x00d6, B:11:0x00ed, B:13:0x0104, B:18:0x011f, B:21:0x01ee, B:23:0x01f4, B:25:0x01fa, B:29:0x0214, B:31:0x021e, B:34:0x0226, B:40:0x0248, B:54:0x02bf, B:56:0x02f1, B:57:0x02f3, B:145:0x061c, B:139:0x05c1, B:141:0x05c5, B:142:0x05f1, B:144:0x05f5, B:37:0x0240, B:42:0x0260, B:44:0x026a, B:47:0x0272, B:53:0x02a9, B:50:0x028e), top: B:164:0x005d }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x030e  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x03fe A[Catch: Exception -> 0x05be, TRY_ENTER, TryCatch #0 {Exception -> 0x05be, blocks: (B:76:0x03d2, B:79:0x03fe, B:82:0x0409, B:90:0x0420, B:85:0x0413), top: B:158:0x03d2 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0411  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0413 A[Catch: Exception -> 0x05be, TryCatch #0 {Exception -> 0x05be, blocks: (B:76:0x03d2, B:79:0x03fe, B:82:0x0409, B:90:0x0420, B:85:0x0413), top: B:158:0x03d2 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x044b A[Catch: Exception -> 0x05bc, TryCatch #1 {Exception -> 0x05bc, blocks: (B:92:0x0439, B:94:0x044b, B:96:0x0462, B:98:0x0479, B:100:0x0490, B:102:0x04a7, B:105:0x04c7, B:107:0x04cd, B:111:0x04d7, B:114:0x04dd, B:116:0x04f4, B:120:0x050e, B:133:0x05a7, B:122:0x0525, B:123:0x052a, B:125:0x0580, B:127:0x0588, B:128:0x0591, B:129:0x0599, B:131:0x05a0), top: B:160:0x0439 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public java.lang.String homeContent(boolean r80) {
        /*
            Method dump skipped, instructions count: 1651
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.homeContent(boolean):java.lang.String");
    }

    public String homeVideoContent() {
        String str;
        String str2;
        String replaceAll;
        String m1242 = C0241.m1242(f36short, 5949, 2, 2099);
        String m1246 = C0243.m1246(f36short, 5951, 6, 2627);
        String m1250 = C0244.m1250(f36short, 5957, 4, 2953);
        String m1265 = C0249.m1265(f36short, 5961, 1, 2687);
        try {
            String F = F(C0251.m1271(f36short, 5962, 2, 1687), C0242.m1245(f36short, 5964, 2, 371), C0243.m1246(f36short, 5966, 11, 348), C0242.m1245(f36short, 5977, 6, 3057), C0246.m1257(f36short, 5983, 2, 1700));
            boolean equals = F.equals(m1265);
            String m1257 = C0246.m1257(f36short, 5985, 2, 2852);
            if (equals || F.equals(m1257)) {
                F = C0250.m1267(f36short, 5987, 2, 388);
            }
            int length = D(m1250, m1246, "").length();
            String m12502 = C0244.m1250(f36short, 5989, 1, 1281);
            if (length < 3) {
                str = this.c + m12502;
            } else {
                str = D(m1250, m1246, "") + m12502;
            }
            this.e = 40;
            int indexOf = F.indexOf(C0243.m1246(f36short, 5990, 1, 805));
            String m1237 = C0240.m1237(f36short, 5991, 2, 881);
            String m1271 = C0251.m1271(f36short, 5993, 10, 2324);
            String m12422 = C0241.m1242(f36short, 6003, 2, 2855);
            if (indexOf >= 0) {
                this.e = Integer.parseInt(F.split(m1242)[1]);
                String str3 = F.split(m1242)[0];
                if (str3.equals(m1257)) {
                    replaceAll = "";
                } else {
                    str2 = m12422 + str3 + m1271;
                    replaceAll = str.replaceAll(str2, m1237);
                }
            } else if (F.matches(C0251.m1271(f36short, 6005, 3, 1677))) {
                this.e = Integer.parseInt(F);
                replaceAll = "";
            } else {
                str2 = m12422 + F + m1271;
                replaceAll = str.replaceAll(str2, m1237);
            }
            if (this.e > 0) {
                this.d = true;
                this.r = m1257;
                JSONObject e = e(replaceAll, m1265, false, new HashMap<>());
                this.r = "";
                this.d = false;
                return e != null ? e.toString() : "";
            }
        } catch (Exception e2) {
            if (this.m) {
                Init.show(this.G + C0244.m1250(f36short, 6008, 13, 2378) + e2.toString());
            }
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                b.a(e2, d.b(C0242.m1245(f36short, 6021, 12, 2238)), spiderApi);
            }
        }
        return "";
    }

    final String i(String str) {
        String str2 = str;
        if (!str2.isEmpty()) {
            String m1237 = C0240.m1237(f36short, 6033, 1, 1846);
            String[] strArr = {m1237, C0238.m1232(f36short, 6034, 1, 2768), C0250.m1267(f36short, 6035, 1, 3017), C0247.m1258(f36short, 6036, 1, 3190), C0242.m1245(f36short, 6037, 1, 945), C0243.m1246(f36short, 6038, 1, 1530), C0247.m1258(f36short, 6039, 1, 2506), C0251.m1271(f36short, 6040, 1, 1806), C0242.m1245(f36short, 6041, 1, 846), C0241.m1242(f36short, 6042, 1, 1432), C0242.m1245(f36short, 6043, 1, 1895), C0238.m1232(f36short, 6044, 1, 1031), C0238.m1232(f36short, 6045, 1, 1098), C0238.m1232(f36short, 6046, 1, 1907)};
            for (int i = 0; i < 14; i++) {
                String str3 = strArr[i];
                if (str2.indexOf(str3) >= 0) {
                    str2 = str2.replace(str3, m1237 + str3);
                }
            }
        }
        return str2;
    }

    public void init(Context context) {
        super.init(context);
    }

    public void init(Context context, String str) {
        String[] split;
        String m1237 = C0240.m1237(f36short, 6047, 2, 2559);
        String m1245 = C0242.m1245(f36short, 6049, 1, 843);
        this.C = context;
        super.init(context, str);
        if (str != null) {
            try {
                if (str.startsWith(C0251.m1271(f36short, 6050, 4, 608))) {
                    if (str.indexOf(C0241.m1242(f36short, 6054, 8, 1613)) < 0) {
                        this.B = new JSONObject(C0560b.h(str, null, null));
                    } else {
                        JSONObject jSONObject = new JSONObject();
                        this.B = jSONObject;
                        jSONObject.put(C0252.m1274(f36short, 6062, 5, 978), str);
                    }
                } else if (str.startsWith(C0241.m1242(f36short, 6067, 1, 945))) {
                    this.B = new JSONObject(str);
                } else {
                    this.B = new JSONObject();
                    String replace = str.replace(C0243.m1246(f36short, 6068, 2, 369), m1237);
                    int indexOf = replace.indexOf(m1245);
                    String m1252 = C0245.m1252(f36short, 6070, 1, 1252);
                    if (indexOf < 0) {
                        this.B.put(replace.substring(0, replace.indexOf(m1252)), replace.substring(replace.indexOf(m1252) + 1).replace(m1237, m1245));
                    } else {
                        for (String str2 : replace.split(m1245)) {
                            this.B.put(str2.substring(0, str2.indexOf(m1252)), str2.substring(str2.indexOf(m1252) + 1).replace(m1237, m1245));
                        }
                    }
                }
                M();
            } catch (JSONException e) {
                if (this.m) {
                    Init.show(C0250.m1267(f36short, 6071, 7, 1639));
                }
                SpiderApi spiderApi = this.I;
                if (spiderApi != null) {
                    StringBuilder b = d.b(C0242.m1245(f36short, 6078, 10, 1974));
                    b.append(e.toString());
                    spiderApi.log(b.toString());
                }
            }
        }
    }

    public void initApi(SpiderApi spiderApi) {
        this.I = spiderApi;
        super.initApi(spiderApi);
        String port = spiderApi.getPort();
        this.J = port;
        Init.e = port;
        StringBuilder b = d.b(C0252.m1274(f36short, 6088, 6, 3132));
        b.append(this.J);
        spiderApi.log(b.toString());
    }

    public boolean isVideoFormat(String str) {
        String lowerCase = str.toLowerCase();
        if (lowerCase.startsWith(C0250.m1267(f36short, 6094, 4, 623)) || lowerCase.startsWith(C0249.m1265(f36short, 6098, 6, 737))) {
            String D = D(C0248.m1262(f36short, 6104, 3, 1214), C0251.m1271(f36short, 6107, 11, 626), C0250.m1267(f36short, 6118, 68, 2902));
            String m1267 = C0250.m1267(f36short, 6186, 1, 2921);
            String[] split = D.split(m1267);
            String[] split2 = D(C0248.m1262(f36short, 6187, 3, 2726), "VideoFilter", "url=http#;post;#.js").split(m1267);
            for (String str2 : split) {
                if (lowerCase.indexOf(str2) >= 0) {
                    for (String str3 : split2) {
                        if (lowerCase.indexOf(str3) >= 0) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        }
        return false;
    }

    protected final String j(String str) {
        String str2;
        String h;
        String a = n.a("###", str);
        String K2 = K(str);
        if (K2.indexOf(";post") >= 0) {
            return k(K2);
        }
        boolean startsWith = K2.startsWith("xp");
        if (startsWith) {
            K2 = K2.replaceAll("xp(http.*)", "$1");
        }
        String str3 = this.s;
        String E = str3.indexOf("g") >= 0 ? "GBK" : E("编码", "网页编码格式", "Coding_format", "UTF-8");
        if ("UTF-8".equals(E)) {
            str2 = "";
        } else {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                spiderApi.log("编码--> " + E);
            }
            str2 = h(K2);
        }
        HashMap hashMap = new HashMap();
        boolean z = true;
        if (str2.length() < 1) {
            if (this.s.indexOf("J") < 0 || K2.indexOf("outerHTML") >= 0 || K2.indexOf("innerHTML") >= 0 || this.I == null) {
                h = C0560b.h(K2, !"搜索".equals(this.r) ? r(K2) : I(K2), hashMap);
            } else {
                String str4 = this.s.indexOf("Jb") >= 0 ? ":document.body.innerHTML" : ":document.documentElement.outerHTML";
                String str5 = this.I.getAddress(true) + "webparse/" + K2 + "<<eval" + (str3.matches(".*Jb?\\d+.*") ? str3.replaceAll(".*Jb?(\\d+).*", "$1") : "") + str4;
                SpiderApi spiderApi2 = this.I;
                if (spiderApi2 != null) {
                    spiderApi2.log("正在使用代理get--> " + str5);
                }
                h = this.I.webParse(str5, "");
            }
            str2 = h;
            if (str2 == null) {
                str2 = "";
            }
        }
        T(hashMap);
        String V = V(P(K2, str2));
        if ("0".equals(this.A) || ((this.s.indexOf("y") < 0 && this.s.indexOf("Y") < 0 && B("验证").length() <= 0) || (V.indexOf("安全验证") < 0 && V.indexOf("输入验证码") < 0 && V.indexOf("滑动验证") < 0 && V.indexOf("人机验证") < 0))) {
            z = false;
        }
        if (z) {
            SpiderApi spiderApi3 = this.I;
            if (spiderApi3 != null) {
                spiderApi3.log("弹窗验证，源码为--> " + V);
            }
            V = d0("fetch", n.a(K2, a), V, B("验证"));
            if (V.indexOf("安全验证") < 0 || V.indexOf("输入验证码") < 0 || V.indexOf("滑动验证") < 0 || V.indexOf("人机验证") < 0) {
                Init.show("验证成功！");
                this.A = "0";
            }
        }
        String trim = V != null ? startsWith ? V : V.replace(" ", "空空空").replaceAll("\\s+", "").replace("空空空", " ").trim() : "";
        this.x = trim;
        return trim;
    }

    protected final String k(String str) {
        String str2;
        String str3;
        OkHttpClient b;
        LinkedHashMap linkedHashMap;
        String[] strArr;
        String a = n.a("###", str);
        String K2 = K(str);
        boolean startsWith = K2.startsWith("xp");
        if (startsWith) {
            K2 = K2.replaceAll("xp(http.*)", "$1");
        }
        String E = this.s.indexOf("g") >= 0 ? "GBK" : E("编码", "网页编码格式", "Coding_format", "UTF-8");
        if ("UTF-8".equals(E)) {
            str2 = "";
        } else {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                spiderApi.log("编码--> " + E);
            }
            str2 = h(K2);
        }
        boolean z = false;
        if (str2.length() < 1) {
            String trim = K2.split(";post;")[1].trim();
            String str4 = K2.split(";")[0];
            String str5 = this.s;
            if (str5.indexOf("J") < 0 || str4.indexOf("outerHTML") >= 0 || str4.indexOf("innerHTML") >= 0 || this.I == null) {
                str3 = str4;
            } else {
                String str6 = this.s.indexOf("Jb") >= 0 ? ":document.body.innerHTML" : ":document.documentElement.outerHTML";
                str3 = this.I.getAddress(true) + "webparse/" + str4 + "<<eval" + (str5.matches(".*Jb?\\d+.*") ? str5.replaceAll(".*Jb?(\\d+).*", "$1") : "") + str6;
                SpiderApi spiderApi2 = this.I;
                if (spiderApi2 != null) {
                    spiderApi2.log("正在post代理--> " + str3);
                }
                SpiderApi spiderApi3 = this.I;
                if (spiderApi3 != null) {
                    spiderApi3.log("postBody--> " + trim);
                }
            }
            HashMap<String, String> r = !"搜索".equals(this.r) ? r(str4) : I(str4);
            com.github.catvod.spider.merge.h1.k.b bVar = new com.github.catvod.spider.merge.h1.k.b() { // from class: com.github.catvod.spider.XBPQ.6
                /* JADX INFO: Access modifiers changed from: protected */
                @Override // com.github.catvod.spider.merge.h1.k.c
                public final void onFailure(Call call, Exception exc) {
                }

                @Override // com.github.catvod.spider.merge.h1.k.c
                protected final /* bridge */ /* synthetic */ void onResponse(String str7) {
                }
            };
            SpiderApi spiderApi4 = this.I;
            if (spiderApi4 != null) {
                spiderApi4.log("发出post请求...");
            }
            if (trim.isEmpty()) {
                b = g.b();
                linkedHashMap = null;
            } else if (trim.startsWith("{") && trim.endsWith("}")) {
                try {
                    g.f(g.b(), str3, new JSONObject(trim).toString(), r, bVar);
                } catch (JSONException e) {
                    if (this.m) {
                        Init.show(this.G + "调试->fetchPost出错：" + e.toString());
                    }
                    SpiderApi spiderApi5 = this.I;
                    if (spiderApi5 != null) {
                        StringBuilder b2 = d.b("fetchPost()错误-->");
                        b2.append(e.toString());
                        spiderApi5.log(b2.toString());
                    }
                }
                str2 = bVar.getResult();
                K2 = str4;
            } else {
                linkedHashMap = new LinkedHashMap();
                String[] split = trim.split("\\&");
                int length = split.length;
                int i = 0;
                while (i < length) {
                    String str7 = split[i];
                    if (str7.endsWith("=")) {
                        strArr = split;
                    } else {
                        int indexOf = str7.indexOf("=");
                        strArr = split;
                        linkedHashMap.put(str7.substring(0, indexOf), str7.substring(indexOf + 1));
                    }
                    i++;
                    split = strArr;
                }
                b = g.b();
            }
            g.e(b, str3, linkedHashMap, r, bVar);
            str2 = bVar.getResult();
            K2 = str4;
        }
        if (str2 == null) {
            str2 = "";
        }
        String V = V(P(K2, str2));
        if (!"0".equals(this.A) && ((this.s.indexOf("y") >= 0 || this.s.indexOf("Y") >= 0 || B("验证").length() > 0) && (V.indexOf("安全验证") >= 0 || V.indexOf("输入验证码") >= 0 || V.indexOf("滑动验证") >= 0 || V.indexOf("人机验证") >= 0))) {
            z = true;
        }
        if (z) {
            SpiderApi spiderApi6 = this.I;
            if (spiderApi6 != null) {
                spiderApi6.log("需要验证，源码为--> " + V);
            }
            V = d0("fetchPost", n.a(K2, a), V, B("验证"));
            if (V.indexOf("安全验证") < 0 || V.indexOf("输入验证码") < 0 || V.indexOf("滑动验证") < 0 || V.indexOf("人机验证") < 0) {
                Init.show("验证成功！");
                this.A = "0";
            }
        }
        String trim2 = V != null ? startsWith ? V : V.replace(" ", "空空空").replaceAll("\\s+", "").replace("空空空", " ").trim() : "";
        this.x = trim2;
        return trim2;
    }

    public Object[] mProxy(Map<String, String> map) {
        return Proxy.proxy(map);
    }

    public boolean manualVideoCheck() {
        return !D("嗅探词", "过滤词", "").isEmpty() || C("手动嗅探", "ManualSniffer").equals("1") || this.s.indexOf("x") >= 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:70:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0232  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0275  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0297  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x029c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    protected final java.lang.String n(java.lang.String r78) {
        /*
            Method dump skipped, instructions count: 717
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.n(java.lang.String):java.lang.String");
    }

    /* JADX WARN: Can't wrap try/catch for region: R(32:160|161|(1:407)(2:171|(1:173)(12:(2:388|(2:401|(2:406|88)(1:405))(1:400))(16:309|(1:311)(1:387)|312|313|314|(4:317|(4:319|(2:321|(2:323|(1:325))(2:326|(2:328|(1:330)(1:331))))|332|(2:336|(2:338|339)(1:380)))(1:384)|381|315)|385|340|(1:379)|344|345|(2:350|(3:360|(1:362)|363)(3:356|357|358))|365|(1:367)(1:369)|368|358)|89|90|(1:92)|93|(1:114)|103|(1:113)|107|(1:109)|110|111))|174|175|176|177|178|179|180|181|(5:261|262|(4:264|265|266|267)(1:294)|268|(1:(7:270|271|272|273|274|275|(2:282|283)(2:277|(2:280|281)(1:279)))(2:287|288)))(1:183)|184|(2:248|(1:250)(2:251|(1:253)(2:254|(1:256)(2:257|(1:259)(1:260)))))(1:186)|187|(2:189|(2:199|(2:202|203)(1:201))(0))|204|(20:209|(1:211)|212|(17:217|(2:221|(14:223|224|90|(0)|93|(1:95)|114|103|(1:105)|113|107|(0)|110|111))|237|238|239|90|(0)|93|(0)|114|103|(0)|113|107|(0)|110|111)|240|(14:242|239|90|(0)|93|(0)|114|103|(0)|113|107|(0)|110|111)|238|239|90|(0)|93|(0)|114|103|(0)|113|107|(0)|110|111)|243|(1:245)|90|(0)|93|(0)|114|103|(0)|113|107|(0)|110|111) */
    /* JADX WARN: Code restructure failed: missing block: B:105:0x029e, code lost:
        if (r0 != false) goto L152;
     */
    /* JADX WARN: Code restructure failed: missing block: B:323:0x06ed, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:324:0x06ee, code lost:
        r2 = r2;
        r4 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:331:0x0715, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:332:0x0716, code lost:
        r4 = "parse";
     */
    /* JADX WARN: Code restructure failed: missing block: B:334:0x071d, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:335:0x071e, code lost:
        r2 = r6;
        r4 = "parse";
        r10 = r17;
        r15 = r19;
        r6 = "跳转post";
     */
    /* JADX WARN: Code restructure failed: missing block: B:336:0x0727, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:337:0x0728, code lost:
        r23 = r29;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:341:0x0733 A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:344:0x0754 A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:347:0x077d A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:350:0x079b A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:361:0x07d6 A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:366:0x07e4 A[Catch: Exception -> 0x0838, TryCatch #6 {Exception -> 0x0838, blocks: (B:345:0x076c, B:347:0x077d, B:348:0x0782, B:350:0x079b, B:352:0x07a5, B:354:0x07af, B:356:0x07b9, B:359:0x07cc, B:361:0x07d6, B:364:0x07e0, B:366:0x07e4, B:367:0x0802, B:363:0x07da, B:358:0x07c3, B:339:0x072c, B:341:0x0733, B:342:0x0750, B:344:0x0754, B:371:0x080b, B:373:0x0819, B:374:0x0831), top: B:398:0x0051 }] */
    /* JADX WARN: Removed duplicated region for block: B:382:0x0840  */
    /* JADX WARN: Removed duplicated region for block: B:385:0x0861  */
    /* JADX WARN: Type inference failed for: r12v2, types: [java.lang.StringBuilder] */
    /* JADX WARN: Type inference failed for: r12v4, types: [java.lang.StringBuilder] */
    /* JADX WARN: Type inference failed for: r13v3, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r14v3, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v11, types: [java.lang.CharSequence, java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v31, types: [java.lang.String[]] */
    /* JADX WARN: Type inference failed for: r78v0, types: [com.github.catvod.spider.XBPQ] */
    /* JADX WARN: Type inference failed for: r7v21, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v18, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v24, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v25, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v28, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r9v53 */
    /* JADX WARN: Type inference failed for: r9v54 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public java.lang.String playerContent(java.lang.String r79, java.lang.String r80, java.util.List<java.lang.String> r81) {
        /*
            Method dump skipped, instructions count: 2155
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.playerContent(java.lang.String, java.lang.String, java.util.List):java.lang.String");
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x00fd  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x015e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    protected final java.util.HashMap<java.lang.String, java.lang.String> r(java.lang.String r66) {
        /*
            Method dump skipped, instructions count: 375
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.r(java.lang.String):java.util.HashMap");
    }

    public String searchContent(String str, boolean z) {
        String[] split;
        try {
            SpiderApi spiderApi = this.I;
            if (spiderApi != null) {
                spiderApi.log("searchContent(key=" + str + ", quick=" + z + ")");
            }
            this.r = "搜索";
            JSONObject W = W("", str, z);
            String replace = E("特殊分类", "特殊分类url", "特殊分类链接", "").replace(this.f, "");
            if (W == null || W.getJSONArray("list") == null || W.getJSONArray("list").length() <= 0 || replace.indexOf("#http") >= 0) {
                JSONArray jSONArray = W != null ? W.getJSONArray("list") : new JSONArray();
                for (String str2 : replace.split("#h")) {
                    if (str2.startsWith("ttp")) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("h");
                        sb.append((str2 + "#").replaceAll(".*(ttp.*?)#.*", "$1"));
                        JSONObject W2 = W(sb.toString(), str, z);
                        JSONArray jSONArray2 = W2 != null ? W2.getJSONArray("list") : new JSONArray();
                        if (jSONArray2.length() > 0) {
                            for (int i = 0; i < jSONArray2.length(); i++) {
                                jSONArray.put(jSONArray2.get(i));
                            }
                        }
                    }
                }
                if (this.s.indexOf("k0") >= 0) {
                    this.s = this.s.replace("k0", "");
                }
                if (jSONArray.length() > 0) {
                    return new JSONObject().put("list", jSONArray).toString();
                }
                JSONObject W3 = W(this.f + "/;;搜首页", str, z);
                if (W3 == null || W3.getJSONArray("list") == null || W3.getJSONArray("list").length() <= 0) {
                    String[] split2 = this.c.split("#");
                    int length = split2.length;
                    int i2 = 0;
                    while (true) {
                        if (i2 >= length) {
                            break;
                        }
                        String str3 = split2[i2];
                        JSONObject W4 = W(f(str3.split("\\$")[1], "1", false, null) + ";;搜首页", str, z);
                        JSONArray jSONArray3 = W4 != null ? W4.getJSONArray("list") : new JSONArray();
                        if (jSONArray3.length() > 0) {
                            for (int i3 = 0; i3 < jSONArray3.length(); i3++) {
                                jSONArray.put(jSONArray3.get(i3));
                            }
                        } else {
                            try {
                                Thread.sleep(1000L);
                            } catch (Exception unused) {
                            }
                            i2++;
                        }
                    }
                    return jSONArray.length() > 0 ? new JSONObject().put("list", jSONArray).toString() : "";
                }
                return W3.toString();
            }
            return W.toString();
        } catch (Exception e) {
            if (this.m) {
                Init.show(this.G + "调试->searchContent出错：" + e.toString());
            }
            SpiderApi spiderApi2 = this.I;
            if (spiderApi2 != null) {
                b.a(e, d.b("searchContent()错误-->"), spiderApi2);
            }
            return "";
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:122:0x01d4 A[EDGE_INSN: B:122:0x01d4->B:54:0x01d4 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:123:0x029d A[EDGE_INSN: B:123:0x029d->B:78:0x029d ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0121 A[Catch: Exception -> 0x0329, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0142 A[Catch: Exception -> 0x0329, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01b4 A[Catch: Exception -> 0x0329, LOOP:0: B:50:0x01a9->B:53:0x01b4, LOOP_END, TRY_ENTER, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x020b A[Catch: Exception -> 0x0329, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x02a5 A[Catch: Exception -> 0x0329, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x02c5 A[Catch: Exception -> 0x0329, TryCatch #2 {Exception -> 0x0329, blocks: (B:3:0x000f, B:5:0x0024, B:7:0x002e, B:9:0x0044, B:11:0x0059, B:12:0x005d, B:49:0x015b, B:50:0x01a9, B:53:0x01b4, B:54:0x01d4, B:55:0x0202, B:57:0x020b, B:58:0x021b, B:60:0x0224, B:62:0x0228, B:64:0x0231, B:66:0x0257, B:71:0x0278, B:69:0x0261, B:72:0x027d, B:74:0x0285, B:76:0x028b, B:77:0x028e, B:78:0x029d, B:80:0x02a5, B:82:0x02b1, B:83:0x02b4, B:84:0x02b7, B:86:0x02c5, B:88:0x02cc, B:95:0x0305, B:89:0x02d1, B:92:0x02d7, B:93:0x02e4, B:94:0x02e9, B:96:0x0308, B:42:0x011d, B:44:0x0121, B:45:0x013e, B:47:0x0142, B:8:0x0042), top: B:110:0x000f }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public java.lang.String xpDetailContent(java.util.List<java.lang.String> r70) {
        /*
            Method dump skipped, instructions count: 857
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.xpDetailContent(java.util.List):java.lang.String");
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x00dd A[Catch: JSONException -> 0x013d, TryCatch #0 {JSONException -> 0x013d, blocks: (B:3:0x0010, B:6:0x0029, B:8:0x002f, B:9:0x0041, B:11:0x0049, B:14:0x0052, B:17:0x006a, B:19:0x0074, B:20:0x007b, B:22:0x0081, B:30:0x00c2, B:31:0x00c5, B:33:0x00dd, B:35:0x00e6, B:37:0x00f4, B:49:0x0135, B:39:0x00fa, B:41:0x0106, B:44:0x0115, B:48:0x0132, B:47:0x012c, B:50:0x0138, B:25:0x008c, B:27:0x0092, B:29:0x009c), top: B:60:0x0010 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    protected final java.lang.String z(java.lang.String r66) {
        /*
            Method dump skipped, instructions count: 376
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.XBPQ.z(java.lang.String):java.lang.String");
    }
}